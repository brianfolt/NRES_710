exp_table <- sapply(1:ncol(con_table),function(t) sum.coats[t]*prop.ears)
colnames(exp_table) <- colnames(con_table)
#####
# compute chi-squared and G statistics
Chisq.stat <- sum((con_table-exp_table)^2/exp_table)
G.stat <- 2*sum(con_table*log(con_table/exp_table))   # slightly different!
#####
# Compare chi squared and G statistics with null sampling distribution
curve(dchisq(x,4),0,10)
abline(v=Chisq.stat,col="blue",lwd=1)
abline(v=G.stat,col="red",lwd=1)
legend("topright",lty=c(1,1),lwd=c(1,1),col=c("blue","red"),legend=c("Chi-squared","G stat"),bty="n")
p.value.Chi <- 1-pchisq(Chisq.stat,4)
p.value.G <- 1-pchisq(G.stat,4)
text(7,0.12,paste0("p.Chi = ",round(p.value.Chi,3)))
text(7,0.1,paste0("p.G = ",round(p.value.G,3)))
######
# Compare with R's built in chi squared function
chisq.test(con_table)
n.bunnies <- 112
# sample assuming null hypothesis is true
all.bunnies <- data.frame(
ear_type = sample(c("floppy","pointy","mixed"),n.bunnies,replace = T),
coat_color = sample(c("white","brown","mixed"),n.bunnies,replace = T)
)
head(all.bunnies)
con_table <- table(all.bunnies$ear_type,all.bunnies$coat_color)
prop.ears <- rowSums(con_table)/n.bunnies
sum.coats <- colSums(con_table)
exp_table <- sapply(1:ncol(con_table),function(t) sum.coats[t]*prop.ears)
colnames(exp_table) <- colnames(con_table)
?fisher.test
fisher.test(con_table)
chisq.test(con_table)
fisher.test(con_table)
fisher.test(con_table,simulate.p.value = T)
fisher.test(con_table)
fisher.test(con_table,simulate.p.value = T)
fisher.test(con_table,simulate.p.value = T,B=5000)
nonnormal.data <- rbinom(150,100,0.08)  # generate non-normal data
normal.data <- rnorm(150,100,10)  # generate normal data
nonnormal.data <- rbinom(150,100,0.08)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
normal.data <- rnorm(150,10,1)  # generate normal data
nonnormal.data <- rbinom(150,100,0.1)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
normal.data <- rnorm(150,5,1)  # generate normal data
normal.data <- rnorm(150,5,1)  # generate normal data
nonnormal.data <- rbinom(150,100,0.05)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
?cut
breaks <- seq(-Inf,0,1:11,Inf)
breaks <- c(-Inf,0,1:11,Inf)
breaks
normal.data.binned <- cut(normal.data,breaks)
normal.data.binned
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
normal.data.binned
breaks <- -5,20
breaks <- -5:20
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
normal.data.binned
normal.data <- rnorm(150,5,1)  # generate normal data
nonnormal.data <- rbinom(150,100,0.05)  # generate non-normal data
breaks <- -5:20
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
normal.data.binned
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
obs_table_norm
obs_table_nonnorm
normal.data <- min(11,max(0,rnorm(150,5,1)))  # generate normal data
normal.data
normal.data <- pmin(11,pmax(0,rnorm(150,5,1)))  # generate normal data
normal.data
nonnormal.data <-  pmin(11,pmax(rbinom(150,100,0.05)))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- 0:11
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_norm
obs_table_nonnorm
obs_table_nonnorm <- table(nonnormal.data.binned)
obs_table_nonnorm
normal.data.binned
obs_table_norm
normal.probs <- numeric(length(obs_table_norm))
normal.probs
normal.probs[1] <- pnorm(breaks[2])
m
normal.probs <- numeric(length(obs_table_norm))
normal.probs[1] <- pnorm(breaks[2],mean(normal.data),sd(normal.data))
normal.probs
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
normal.probs
sum(normal.probs)
breaks <- c(-Inf,2:8,Inf)
normal.data <- rnorm(150,5,1)  # generate normal data
nonnormal.data <-  rbinom(150,100,0.05)  # generate non-normal data
normal.data <- rnorm(150,5,1.5)  # generate normal data
nonnormal.data <-  rbinom(150,100,0.05)  # generate non-normal data
breaks <- c(-Inf,2:9,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
normal.data.binned
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
obs_table_norm
obs_table_nonnorm
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
normal.probs
sum(normal.probs)
exp_table_norm <- length(normal.data)*normal.probs
exp_table_norm <- table(length(normal.data)*normal.probs)
exp_table_norm
length(normal.data)
normal.probs
length(normal.data)*normal.probs
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs
exp_table_nonnorm
chistat_norm <- sum((obs_table_norm-exp_table_norm)/exp_table_norm)
chistat_norm <- sum((obs_table_norm-exp_table_norm)^2/exp_table_norm)
chistat_norm
pval_norm(pchisq(chistat_norm,length(exp_table_norm)-1))
pval_norm <- pchisq(chistat_norm,length(exp_table_norm)-1)
pval_norm
chistat_nonnorm <- sum((obs_table_nonnorm-exp_table_nonnorm)^2/exp_table_nonnorm)
pval_nonnorm <- pchisq(chistat_nonnorm,length(exp_table_nonnorm)-1)
pval_nonnorm
chistat_nonnorm
pval_nonnorm <- 1-pchisq(chistat_nonnorm,length(exp_table_nonnorm)-1)
pval_nonnorm
shapiro.test(normal.data)
pval_norm
pval_norm <- 1-pchisq(chistat_norm,length(exp_table_norm)-1)
pval_norm
shapiro.test(nonnormal.data)
exp_table_nonnorm
exp_table_norm
######
# Chi-squared test for normality
normal.data <- rnorm(150,5,1.5)  # generate normal data
nonnormal.data <-  rbinom(150,100,0.05)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
#####
# First bin the data (chi squared test must be on categorical data!)
breaks <- c(-Inf,2:9,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
#####
# Determine expected values in each cell if the underlying distribution were normal
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
######
# Chi squared stat for normality test on normal data
chistat_norm <- sum((obs_table_norm-exp_table_norm)^2/exp_table_norm)
pval_norm <- 1-pchisq(chistat_norm,length(exp_table_norm)-1)
pval_norm
chistat_nonnorm <- sum((obs_table_nonnorm-exp_table_nonnorm)^2/exp_table_nonnorm)
pval_nonnorm <- 1-pchisq(chistat_nonnorm,length(exp_table_nonnorm)-1)
pval_nonnorm
####
# Compare with shapiro wilk test (which is a better test!)
shapiro.test(normal.data)
shapiro.test(nonnormal.data)
nonnormal.data <-  rpois(250,5)  # generate non-normal data
normal.data <- rnorm(250,5,1)  # generate normal data
nonnormal.data <-  rpois(250,5)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
rpois(250,5)
jitter(rpois(250,5))
nonnormal.data <-  jitter(rpois(250,5))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
hist(normal.data)
breaks <- c(-Inf,2:9,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_norm
normal.data <- rnorm(250,5,1.5)  # generate normal data
nonnormal.data <-  jitter(rpois(250,5))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,2:9,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_norm
exp_table_nonnorm
normal.data <- rnorm(250,5,1.5)  # generate normal data
nonnormal.data <-  runif(250,0,10)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,2,3,4,4.5,5,5.5,6,7,8,Inf)
normal.data <- rnorm(250,5,1.5)  # generate normal data
nonnormal.data <-  runif(250,1,9)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,2,3,4,4.5,5,5.5,6,7,8,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
obs_table_norm
obs_table_nonnorm
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_norm
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_nonnorm
obs_table_nonnorm
normal.data <- rnorm(250,4,1.5)  # generate normal data
nonnormal.data <-  jitter(rbinom(250,10,0.1))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
hist(normal.data)
hist(normal.data)
hist(normal.data)
hist(nonnormal.data)
normal.data <- rnorm(250,4,1.5)  # generate normal data
nonnormal.data <-  jitter(rbinom(250,10,0.2))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,1,2,3,3.5,4,4.5,5,6,7,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_norm
exp_table_nonnorm
nonnormal.data <-  jitter(rbinom(250,10,0.3))  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,1,2,3,3.5,4,4.5,5,6,7,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
exp_table_nonnorm
obs_table_nonnorm
jitter(rbinom(250,10,0.3))
normal.data <- rnorm(250,4,1.5)  # generate normal data
nonnormal.data <-  runif(250,2,6)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
breaks <- c(-Inf,1,2,3,3.5,4,4.5,5,6,7,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
obs_table_nonnorm
exp_table_nonnorm
######
# Chi-squared test for normality
normal.data <- rnorm(250,4,1.5)  # generate normal data
nonnormal.data <-  runif(250,2,6)  # generate non-normal data
hist(normal.data)
hist(nonnormal.data)
#####
# First bin the data (chi squared test must be on categorical data!)
breaks <- c(-Inf,1,2,3,3.5,4,4.5,5,6,7,Inf)
normal.data.binned <- cut(normal.data,breaks,labels=breaks[-1])
nonnormal.data.binned <- cut(nonnormal.data,breaks,labels=breaks[-1])
obs_table_norm <- table(normal.data.binned)
obs_table_nonnorm <- table(nonnormal.data.binned)
#####
# Determine expected values in each cell if the underlying distribution were normal
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(normal.data),sd(normal.data))-pnorm(breaks[t-1],mean(normal.data),sd(normal.data))  )
exp_table_norm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
normal.probs <- sapply(2:length(breaks), function(t) pnorm(breaks[t],mean(nonnormal.data),sd(nonnormal.data))-pnorm(breaks[t-1],mean(nonnormal.data),sd(nonnormal.data))  )
exp_table_nonnorm <- length(normal.data)*normal.probs  # check that expected vals are greater than 5
######
# Chi squared stat for normality test on normal data
chistat_norm <- sum((obs_table_norm-exp_table_norm)^2/exp_table_norm)
pval_norm <- 1-pchisq(chistat_norm,length(exp_table_norm)-1)
pval_norm
chistat_nonnorm <- sum((obs_table_nonnorm-exp_table_nonnorm)^2/exp_table_nonnorm)
pval_nonnorm <- 1-pchisq(chistat_nonnorm,length(exp_table_nonnorm)-1)
pval_nonnorm
####
# Compare with shapiro wilk test (which is a better test!)
shapiro.test(normal.data)
shapiro.test(nonnormal.data)
n.bunnies <- 20
# sample assuming null hypothesis is true
all.bunnies <- data.frame(
ear_type = sample(c("floppy","pointy","mixed"),n.bunnies,replace = T),
coat_color = sample(c("white","brown","mixed"),n.bunnies,replace = T)
)
head(all.bunnies)
con_table <- table(all.bunnies$ear_type,all.bunnies$coat_color)
prop.ears <- rowSums(con_table)/n.bunnies
sum.coats <- colSums(con_table)
exp_table <- sapply(1:ncol(con_table),function(t) sum.coats[t]*prop.ears)
colnames(exp_table) <- colnames(con_table)
exp_table
chisq.test(con_table)
fisher.test(con_table)
fisher.test(con_table,simulate.p.value = T,B=5000)   # use simulated p-value
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
mod <- lm(Volume~Girth,data=trees)
mod
summary(mod)
probsucc <- function(light){    # egg success as a function of light pollution
plogis(1.5-0.01*light)
}
curve(probsucc,0,100)
n.nests <- 15
light <- rnorm(n.nests,50,10)
light
probsucc <- function(light){    # egg success as a function of light pollution
plogis(1.5-0.01*light)
}
exp.eggs <- eggs.per.nest*probsucc(light)
eggs.per.nest <- 100
n.nests <- 15
light <- rnorm(n.nests,50,10)   # make up some light pollution values
probsucc <- function(light){    # egg success as a function of light pollution
plogis(1.5-0.01*light)
}
exp.eggs <- eggs.per.nest*probsucc(light)
exp.eggs
exp.eggs <- rbinom(n.nests,eggs.per.nest,probsucc(light))
exp.eggs
exp.eggs <- rbinom(n.nests,eggs.per.nest,probsucc(light))   # determine number of successful eggs
plot(exp.eggs~light)
hatchlings.successful <- rbinom(n.nests,eggs.per.nest,probsucc(light))   # determine number of successful eggs (response var)
plot(hatchlings.successful~light)
eggs.per.nest <- 100
n.nests <- 15
light <- rnorm(n.nests,50,10)   # make up some light pollution values (predictor var)
probsucc <- function(light){    # egg success as a function of light pollution
plogis(1.5-0.01*light)
}
hatchlings.successful <- rbinom(n.nests,eggs.per.nest,probsucc(light))   # determine number of successful eggs (response var)
#curve(probsucc,0,100)
plot(hatchlings.successful~light)
slope <- sum((light-mean(light))*(hatchlings.successful-mean(hatchlings.successful)))/sum((light-mean(light))^2)
slope
intercept <- mean(hatchlings.successful) - slope*mean(light)
intercept
exp.eggs <- intercept+slope*light # expected number of eggs for each observation
exp.eggs
exp.successful <- intercept+slope*light # expected number of eggs for each observation
residuals <- hatchlings.successful-exp.successful
residuals
stderr <- sqrt(((1/(n.nest-2))*sum(residuals^2))/(sum((light-mean(light))^2)))
stderr <- sqrt(((1/(n.nests-2))*sum(residuals^2))/(sum((light-mean(light))^2)))
stderr
t.stat <- (slope-0)/stderr
t.stat
pval <- 2*pt(t.stat,n.nests-2)
pval
model <- lm(hatchlings.successful~light)
summary(model)
pval
summary(model)
plot(hatchlings.successful~light)  # plot the data
slope <- sum((light-mean(light))*(hatchlings.successful-mean(hatchlings.successful)))/sum((light-mean(light))^2)
intercept <- mean(hatchlings.successful) - slope*mean(light)
exp.successful <- intercept+slope*light # expected number of eggs for each observation
residuals <- hatchlings.successful-exp.successful
stderr <- sqrt(((1/(n.nests-2))*sum(residuals^2))/(sum((light-mean(light))^2)))    # standard error
t.stat <- (slope-0)/stderr    # t statistic
pval <- 2*pt(t.stat,n.nests-2)    # p value
############
# use lm function instead (easy way!)
model <- lm(hatchlings.successful~light)
summary(model)   # get the same t stat and p-value hopefully!
############
# plot regression line!
plot(hatchlings.successful~light)  # plot the data
abline(intercept,slope,col="blue")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
summary(anscombe)
plot(anscombe$y1~anscombe$x1)
layout(matrix(1:4,nrow=2,byrow = T))
plot(anscombe$y1~anscombe$x1,ylab="response",xlab="predictor")
plot(anscombe$y2~anscombe$x2,ylab="response",xlab="predictor")
plot(anscombe$y3~anscombe$x3,ylab="response",xlab="predictor")
plot(anscombe$y4~anscombe$x4,ylab="response",xlab="predictor")
mod$coefficients
model$coefficients
my.intercept <- model$coefficients["(Intercept)"]
my.slope <- model$coefficients["light"]
expected.vals <- my.intercept+my.slope*light
expected.vals
my.residuals <- hatchlings.successful-expected.vals
my.residuals
my.residuals
model$residuals
hatchlings.successful-predict(model)
hist(my.residuals)
qqnorm(my.residuals)
shapiro.test(my.residuals)
my.residuals <- model$residuals
plot(my.residuals~light)
plot(model)
layout(matrix(1:4,2,byrow = T))
plot(model)
layout(matrix(1:4,2,byrow = T))
plot(model)
plot(my.residuals~predict(model))
layout(matrix(1:4,2,byrow = T))
plot(model)
layout(matrix(1:4,nrow=2,byrow = T))
plot(anscombe$y1~anscombe$x1,ylab="response",xlab="predictor")
plot(anscombe$y2~anscombe$x2,ylab="response",xlab="predictor")
plot(anscombe$y3~anscombe$x3,ylab="response",xlab="predictor")
plot(anscombe$y4~anscombe$x4,ylab="response",xlab="predictor")
ellem
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmarkdown::render('LECTURE3.Rmd',rmarkdown::pdf_document())
rmarkdown::render('LECTURE4.Rmd',rmarkdown::pdf_document())
rmd2rscript("LECTURE4.Rmd")
