test <- t.test(mass~sex,data=thisdf)
nfrogs.perpond
nsamp.perpond
nponds
nsamp.perpond*nponds.sampled
sample(allfrogs,nsamp.perpond*nponds.sampled)
thissamp
nponds.sampled
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
thissamp.ind
mfdif <- numeric(1000)
mfdif.ind <- numeric(1000)
dif(tapply(thisdf$mass,thisdf$sex,mean))
diff(tapply(thisdf$mass,thisdf$sex,mean))
tapply(thisdf$mass,thisdf$sex,mean)
mfdif[scenario] <- diff(tapply(thisdf$mass,thisdf$sex,mean))
mfdif <- numeric(1000)
mfdif.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
sexes <- thissamp
sexes[] <- ifelse(rbinom(length(thissamp),1,0.5)==1,"Female","Male")
sexes
thisdf <- data.frame(
mass = as.vector(thissamp),
sex = as.vector(sexes)
)
thisdf.ind <- data.frame(
mass = as.vector(thissamp.ind),
sex = as.vector(sexes)
)
mfdif[scenario] <- diff(tapply(thisdf$mass,thisdf$sex,mean))
mfdif.ind[scenario] <- diff(tapply(thisdf.ind$mass,thisdf.ind$sex,mean))
}
layout(matrix(1:2),nrow=1)
layout(matrix(1:2,nrow=1))
hist(mfdif)
hist(mfdif.ind)
layout(matrix(1:2,nrow=1))
hist(mfdif)
hist(mfdif.ind)
layout(matrix(1:2,nrow=1))
hist(mfdif,xlim=c(-0.5,0.5))
hist(mfdif.ind,xlim=c(-0.5,0.5))
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
thissamp
sexes <- thissamp
sexes[] <- ifelse(rbinom(length(thissamp),1,0.5)==1,"Female","Male")
sexes
thisdf <- data.frame(
mass = as.vector(thissamp),
sex = as.vector(sexes)
)
test <- t.test(mass~sex,data=thisdf)
test
test <- t.test(mass~sex,data=thisdf,alternative="greater")
test
test$p.value
ttest[scenario] <- test$p.value
mfdif <- numeric(1000)
mfdif.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
sexes <- thissamp
sexes[] <- ifelse(rbinom(length(thissamp),1,0.5)==1,"Female","Male")
sexes
thisdf <- data.frame(
mass = as.vector(thissamp),
sex = as.vector(sexes)
)
thisdf.ind <- data.frame(
mass = as.vector(thissamp.ind),
sex = as.vector(sexes)
)
mfdif[scenario] <- diff(tapply(thisdf$mass,thisdf$sex,mean))
mfdif.ind[scenario] <- diff(tapply(thisdf.ind$mass,thisdf.ind$sex,mean))
test <- t.test(mass~sex,data=thisdf,alternative="greater")
test.ind <- t.test(mass~sex,data=thisdf.ind,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(mfdif,xlim=c(-0.5,0.5))
hist(mfdif.ind,xlim=c(-0.5,0.5))
nsamp.perpond
nponds.sampled
frogs.sampled
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
t=1
allfrogs[frogs.sampled[,t],ponds.sampled[t]]
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
sexes <- thissamp
sexes[] <- ifelse(rbinom(length(thissamp),1,0.5)==1,"Female","Male")
head(sexes)
thisdf <- data.frame(
mass = as.vector(thissamp),
sex = as.vector(sexes)
)
test <- t.test(mass~sex,data=thisdf,alternative="greater")
test
mfdif <- numeric(1000)
mfdif.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
sexes <- thissamp
sexes[] <- ifelse(rbinom(length(thissamp),1,0.5)==1,"Female","Male")
sexes
thisdf <- data.frame(
mass = as.vector(thissamp),
sex = as.vector(sexes)
)
thisdf.ind <- data.frame(
mass = as.vector(thissamp.ind),
sex = as.vector(sexes)
)
mfdif[scenario] <- diff(tapply(thisdf$mass,thisdf$sex,mean))
mfdif.ind[scenario] <- diff(tapply(thisdf.ind$mass,thisdf.ind$sex,mean))
test <- t.test(mass~sex,data=thisdf,alternative="greater")
test.ind <- t.test(mass~sex,data=thisdf.ind,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(mfdif,xlim=c(-0.5,0.5))
hist(mfdif.ind,xlim=c(-0.5,0.5))
ttest
length(which(ttest<0.05))/1000
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
thissamp
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- diff(tapply(thisdf$mass,thisdf$sex,mean))
means.ind[scenario] <- diff(tapply(thisdf.ind$mass,thisdf.ind$sex,mean))
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(-0.5,0.5))
hist(means.ind,xlim=c(-0.5,0.5))
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- mean(thissamp)
means.ind[scenario] <- mean(thissamp.ind)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(-0.5,0.5))
hist(means.ind,xlim=c(-0.5,0.5))
hist(means
)
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
length(which(ttest<0.05))/1000
length(which(ttest.ind<0.05))/1000
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- mean(thissamp)
means.ind[scenario] <- mean(thissamp.ind)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
length(which(ttest<0.05))/1000
length(which(ttest.ind<0.05))/1000
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))  # account for unknown standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  NRES 710, Lecture 1                               ####
####                                                    ####
####  Kevin Shoemaker and Ben Sullivan                  ####
####  University of Nevada, Reno                        ####
####                                                    ####
############################################################
############################################################
####  Basic Concepts of Probability and statistics      ####
############################################################
#### ALL FROGS IN CA
allfrogs.bodysize <- rlnorm(10000,1.5,0.4)        # statistical 'population'
hist(allfrogs.bodysize,main="",xlab="SVL (mm)")   # plot out histogram
truemean_SVL <- mean(allfrogs.bodysize)           # the 'parameter'
truemean_SVL
mysample <- sample(allfrogs.bodysize,10)    # take sample of size 10 (10 frogs measured)
mean(mysample)   # compute the sample mean
mysample <- sample(allfrogs.bodysize,20)    # take sample of size 20 (20 frogs measured)
mean(mysample)   # compute the sample mean
lotsofsamples <- list()
for(s in 1:5000){
lotsofsamples[[paste0("sample",s)]] <- sample(allfrogs.bodysize,30)    # take sample of size 30 (20 frogs measured)
}
lotsofsamples$sample1
lotsofsamples$sample99
lotsofsamples$sample732
samplemeans <- sapply(lotsofsamples,mean)
hist(samplemeans,xlab="mean body size (n=30)")
hist(rbinom(10000,1,.5),xlab="N heads out of 1")
par(mfrow=c(3,2))
for(i in seq(2,12,2)){
hist(rbinom(10000,i,.5),main=paste0("sample size = ",i),xlab=sprintf("N heads out of %s",i))
}
hist(rbinom(10000,1000,.5),xlab="N heads out of 1")
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- mean(thissamp)
means.ind[scenario] <- mean(thissamp.ind)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
length(which(ttest<0.05))/1000
length(which(ttest.ind<0.05))/1000
#######
# Sampling distribution: the sample mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
std.error <- sample.stdev/sqrt(n)
std.error
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))  # account for unknown standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
## Paired t-test example:
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
p=pt(t.statistic,sample.size-1)
p    # this is the p value
####### Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
p    # this is the p value
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
rmarkdown::render('LECTURE1.Rmd',rmarkdown::pdf_document())
rmd2rscript("LECTURE1.Rmd")
