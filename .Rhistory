density(sampling.distribution)
?density
plot(density(sampling.distribution),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11)  # official sampling distribution
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n")  # official sampling distribution
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n")  # official sampling distribution
n
?rnorm
simulated.samples$`sample 1`
simulated.samples$`sample 2`
curve(dt,-4,4,n-1)
curve(dt(x,n-1),-4,4)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")    # plot the brute-force sampling distribution
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")    # plot the brute-force sampling distribution
sample.mean
sample.stdev
std.error
#######
# Sampling distribution: the sample mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
std.error <- sample.stdev/sqrt(n)
std.error
sampdist <- function(x){sample.mean+std.error*dt(x-sample.mean,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
sampdist <- function(x){std.error*dt(x-sample.mean,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
sampdist <- function(x){dt(x-sample.mean,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
dt(seq(-2,2,.1))
dt(seq(-2,2,.1),n-1)
dt(std.error*seq(-2,2,.1),n-1)
dt(x-sam
std.error
dt(std.error*seq(-2,2,.1),n-1)
dt(std.error*seq(-2,2,.1),n-1)*std.error
dt(std.error*seq(-2,2,.1)*std.error,n-1)
dt(std.error*seq(-2,2,.1)/std.error,n-1)
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="gray")  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="gray",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n-1,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n-2,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n-1,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
mean.weightloss <- mean(weightloss.data)
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
null.weightloss <- 0
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
## Paired t-test example:
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
p=pt(t.statistic,sample.size-1)
p    # this is the p value
t.test(weightloss.data)
?t.test
t.test(weightloss.data,alternative = "less")
p
install.packages("simpleboot")
library(simpleboot)
?one.boot
months()
months
months(1)
months(3)
?months
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,12,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
n-1 degrees of freedom (must be more than two groups)
H0: Pspring = Psummer = Pfall = Pwinter
H1: one of these is not like the other
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,12,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
birthdays.bymonth
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,12,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
exp.birthdays.bymonth
(birthdays.bymonth-exp.birthdays.bymonth)^2
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
curve(dchisq(x,k-1),0,75)
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,12,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(h=Chisq.stat,col="green",lwd=3)
Chisq.stat
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,12,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
exp.birthdays.bymonth
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,55,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,18,29,45,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,28,29,45,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
p <- 1-pchisq(Chisq.stat,k-1)
p
chisq.test()
?chisq.test
chisq.test(birthdays.bymonth)
p
## Z test  (Ben Sullivan example)
GSheight <- read.csv("GSW_height.csv")
h <- GSheight$Height
h
mean(h)
sd(h)
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
12*6
12*6+7
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
n <- length(GSWheight)
s.e. <- sd.gsw/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e
s.e. <- sd.gsw/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
p <- 1-pnorm(z.statistic)
p
mean.gsw
## Paired t-test example:
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
p=pt(t.statistic,sample.size-1)
p    # this is the p value
####### Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
std.error <- sample.stdev/sqrt(n)
std.error
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
## Z test  (Ben Sullivan example)
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)
abline(v=z.statistic)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
## Z test  (Ben Sullivan example)
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)
abline(v=z.statistic,col="green",lwd=3)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
pnorm(z.statistic)
n
pnorm(z.statistic)
p
pnorm(z.statistic)
p
rt(10,df)
?rt
df = 6
rt(10,df)
#########
# t distribution
df = 6
rt(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dt(x,df),-4,4)   # probability density
curve(pt(x,df),-4,4)   # cumulative distribution
integrate(f=dt,lower=-Inf,upper=Inf,df=df)    # just to make sure it integrates to 1!!
#########
# Chi-squared distribution
df = 6
rchisq(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dchisq(x,df),0,15)   # probability density
curve(pchisq(x,df),0,15)   # cumulative distribution
integrate(f=dchisq,lower=0,upper=Inf,df=df)    # just to make sure it integrates to 1!!
?knitr::kable
knitr::kable(courseSchedule,caption="")
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('schedule.Rmd', 'word_document')
