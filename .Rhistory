summary(model)   # get the same t stat and p-value hopefully!
############
# plot regression line!
plot(hatchlings.successful~light)  # plot the data
abline(intercept,slope,col="blue")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
summary(anscombe)
plot(anscombe$y1~anscombe$x1)
layout(matrix(1:4,nrow=2,byrow = T))
plot(anscombe$y1~anscombe$x1,ylab="response",xlab="predictor")
plot(anscombe$y2~anscombe$x2,ylab="response",xlab="predictor")
plot(anscombe$y3~anscombe$x3,ylab="response",xlab="predictor")
plot(anscombe$y4~anscombe$x4,ylab="response",xlab="predictor")
mod$coefficients
model$coefficients
my.intercept <- model$coefficients["(Intercept)"]
my.slope <- model$coefficients["light"]
expected.vals <- my.intercept+my.slope*light
expected.vals
my.residuals <- hatchlings.successful-expected.vals
my.residuals
my.residuals
model$residuals
hatchlings.successful-predict(model)
hist(my.residuals)
qqnorm(my.residuals)
shapiro.test(my.residuals)
my.residuals <- model$residuals
plot(my.residuals~light)
plot(model)
layout(matrix(1:4,2,byrow = T))
plot(model)
layout(matrix(1:4,2,byrow = T))
plot(model)
plot(my.residuals~predict(model))
layout(matrix(1:4,2,byrow = T))
plot(model)
layout(matrix(1:4,nrow=2,byrow = T))
plot(anscombe$y1~anscombe$x1,ylab="response",xlab="predictor")
plot(anscombe$y2~anscombe$x2,ylab="response",xlab="predictor")
plot(anscombe$y3~anscombe$x3,ylab="response",xlab="predictor")
plot(anscombe$y4~anscombe$x4,ylab="response",xlab="predictor")
ellem
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmarkdown::render('LECTURE3.Rmd',rmarkdown::pdf_document())
rmarkdown::render('LECTURE4.Rmd',rmarkdown::pdf_document())
rmd2rscript("LECTURE4.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  NRES 710, Lecture 5                               ####
####                                                    ####
####  Kevin Shoemaker and Ben Sullivan                  ####
####  University of Nevada, Reno                        ####
####                                                    ####
############################################################
############################################################
####  ANOVA                                             ####
############################################################
#######
# Simple one-way ANOVA example
F1 <- c(1,2,2,3)     # plant height under fertilizer treatment 1
F2 <- c(5,6,5,4)
F3 <- c(2,1,2,2)
# combine into single dataframe for easier visualization and analysis
df <- data.frame(
Height = c(F1,F2,F3),
Treatment = rep(c("F1","F2","F3"),each=length(F1)),
stringsAsFactors = T
)
plot(Height~Treatment, data=df)
grand.mean <- mean(df$Height)   # grand mean
group.means <- by(df$Height,df$Treatment,mean)    # group means
n.groups <- length(group.means)   # number of groups
group.sample.size <- by(df$Height,df$Treatment,length)
sample.size <- nrow(df)
explained.var <- sum(group.sample.size*(group.means-grand.mean)^2/(n.groups-1))
groups <- lapply(1:n.groups,function(t) df$Height[df$Treatment==levels(df$Treatment)[t]])
residual.var <- sapply(1:n.groups,function(t) (groups[[t]]-group.means[t])^2/(sample.size-n.groups) )
unexplained.var <- sum(residual.var)
#######
# now we can compute the F statistic!
Fstat <- explained.var/unexplained.var
Fstat
#######
# define degrees of freedom
df1 <- n.groups-1
df2 <- sample.size-n.groups
#######
# visualize the sampling distribution under null hypothesis
curve(df(x,df1,df2),0,10)
######
# compute critical value of F statistic
Fcrit <- qf(0.95,df1,df2)
Fcrit
######
# compute p-value
pval <- 1-pf(Fstat,df1,df2)
#####
# use aov function
model1 <- aov(Height~Treatment,data=df)
summary(model1)
#####
# use lm function
model1 <- lm(Height~Treatment,data=df)
summary(model1)
anova(model1)
unique(df$Treatment)
levels(df$Treatment)
all_pairs <- expand.grid(all_levels)
all_levels <- levels(df$Treatment)
all_pairs <- expand.grid(all_levels)
all_pairs
all_pairs <- expand.grid(all_levels,all_levels)
all_pairs
?split
split(df$Height,df$Treatment)
temp <- split(df$Height,df$Treatment)
lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 )
temp <- split(df,df$Treatment)
temp
temp <- split(df,df$Treatment)
temp
lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 )
df
temp[[1]]
temp[[1]][,1]
sd(temp[[1]][,1])^2
sd(temp[[1]][,1])^2*3
Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 ))
lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 )
sum(Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 )))
Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 ))
residual.var
explained.var
explained.var
unexplained.var
sse <- Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 ))
mse <- sse/(N-k)
mse <- sse/(sample.sd-n.groups)
mse
residual.var
sum(residual.var)
unexplained.var
explained.var
summary(model1)
all_levels <- levels(df$Treatment)
mse <- sse/(sample.size-n.groups)  # compute mean squared error across experiment
mse
sse <- Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 ))
mse <- sse/(sample.size-n.groups)  # compute mean squared error across experiment
q.value <- qtukey(p=0.95,nmeans=n.groups,df=(sample.size-n.groups))
q.value
explained.var
unexplained.var
# find honestly significant difference
tukey.hsd <- q.value * sqrt(unexplained.var/(sample.size/n.groups))
tukey.hsd
all_levels <- levels(df$Treatment)
all_levels
pair_totry <- matrix(c(1,2,1,3,2,3),nrow=3,byrow = T)
pair_totry
thispair <- pair_totry[1,]
mean(df$Height[df$Treatment==all_levels[1]])
dif.between.means <- mean(df$Height[df$Treatment==all_levels[thispair[1]]])-mean(df$Height[df$Treatment==all_levels[thispair[2]]])
thispair <- pair_totry[1,]    # run first pairwise comparison
dif.between.means <- mean(df$Height[df$Treatment==all_levels[thispair[1]]])-mean(df$Height[df$Treatment==all_levels[thispair[2]]])
dif.between.means
pair_totry <- matrix(c(1,2,1,3,2,3),nrow=3,byrow = T)
pair_totry     # these are the pairwise comparisons to make!
all_means <- tapply(df$Height,df$Treatment,mean)
all_means
dif.between.means <- all_means[thispair[1]]-all_means[thispair[2]]
dif.between.means
tukey.hsd
std.err <- sqrt(unexplained.var / 2 * (2 / (sample.size/n.groups)))
### compute p-value!
sample.size.pergroup <- sample.size/n.groups
std.err <- sqrt(unexplained.var / 2 * (2 / sample.size.pergroup))
### compute p-value!
sample.size.pergroup <- sample.size/n.groups
std.err <- sqrt(unexplained.var / 2 * (2 / sample.size.pergroup))
std.err
# first compute q statistic
q.stat <- abs(dif.between.means)/std.err
q.stat
p.val <- ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
p.val
p.val <- 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
p.val
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[1,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(qstat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif)/std.err,
pval = 1-ptukey(qstat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]]
)
temp$dif = all_means[thispair[1]]-all_means[thispair[2]]
temp$qstat = abs(temp$dif)/std.err
temp$pval = 1-ptukey(temp$qstat,nmeans=n.groups,df=(sample.size-n.groups))
results <- rbind(results,temp)
}
results
?TukeyHSD
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
results
library(car)
install.packages("emmeans")
library(emmeans)
emmeans(model1)
?emmeans
model1 <- lm(Height~Treatment,data=df)
emmeans(model1,specs=c("Treatment"))
TukeyHSD(model1)
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
pairs(emm)
model1 <- lm(Height~Treatment,data=df)
emm <- emmeans(model1,specs=c("Treatment"))  # compute the treatment means with 'emmeans'
pairs(emm)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)
plant.av <- aov(plant.lm)
plant.av
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # make anova table
plant.av
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
plot(plant.lm)
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2))
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
plot(plant.av)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
TukeyHSD(plant.av)
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
emm
pairs(emm)    # run tukey test!
emm@post.beta
emm@model.info
emm@grid
emm@grid
emm@grid
emm@levels
emm@matlevs
emm@roles
plot(emm)
str(emm)
emm@linfct
toplot <- emm[1,]
emm[1,]
toplot <- as.matrix(emm[,c("group","emmean","lower.CL","upper.CL")])
emm[,c("group","emmean","lower.CL","upper.CL")]
as.matrix(emm)
emm[1,]
emm[1:3,]
emm[,c("group","emmean","lower.CL","upper.CL")]
emm@V
summary(emm)
toplot <- as.matrix(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
toplot
rownames(toplot) <- toplot$group
xvals <- barplot(toplot$emmean)
?barplot
toplot$emmean
xvals <- barplot(toplot$emmean,names.arg = toplot$group)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
?arrows
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(2,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
layout(matrix(1,nrow=1,byrow = T))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
