newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
## try Poisson count regression model!
mydat <- mydat <- data.frame(response=response,predictor=predictor)
model <- glm(response~predictor,family=poisson(link="log"),data=mydat)
summary(model)
plot(response~predictor,data=mydat)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta",show_distribution = T)
poisson(link="log")
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta")
thisdat <- sapply(1:15,function(t) rpoisson(100,lambda=t) )
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat
library(tidyverse)
library(ggplot2)
tibble(thisdat)
tibble(thisdat)
?pivot_longer
pivot_longer(tibble(thisdat),cols=everything)
pivot_longer(tibble(thisdat),cols=everything())
pivot_longer(tibble(thisdat),cols=everything())
thisdat <- pivot_longer(tibble(thisdat),cols=everything(),names_to = "mean", values_to = "value" )
thisdat
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
tibble(thisdat)
tibble(thisdat)
?tibble
thisdat <- thisdat %>%
tibble(.name_repair = "unique")
thisdat
?as.tibble
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat %>%
as_tibble()
thisdat %>%
as_tibble(.name_repair = "unique")
thisdat %>%
as_tibble(.name_repair = "unique") %>%
pivot_longer(,cols=everything(),names_to = "mean", values_to = "value" )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform=as.numeric)
thisdat
?stringr::extract
?stringr::str_extract
?across
?rename
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with(str_extract("(\\d)+"))
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with(str_extract(pat="(\\d)+"))
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+"))
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value")
thisdat
ggplot(thisdat,aex(mean,value)) +
geom_boxplot()
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value")
ggplot(thisdat,aes(mean,value)) +
geom_boxplot()
thisdat
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(mean,value)) +
geom_boxplot()
thisdat
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(mean,value)) +
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(mean,value)) +
geom_point(alpha=0.4)
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(mean,value)) +
geom_point(alpha=0.4) +
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(mean,value)) +
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(100,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(y=value)) +
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(1000,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(y=value)) +
geom_boxplot(aes(group=mean))
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(1000,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(x=mean,y=value)) +
geom_boxplot(aes(group=mean))
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
paste0(c("model df: ", "Residual deviance: "),     # resid deviance should be close to residual df
round(c(model$df.residual, deviance(model)), 2))
model$null.deviance
deviance(model)
deviance(model)
model$df.residual
model$df.residual
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
paste0(c("model df: ", "Residual deviance: "),     # resid deviance should be close to residual df
round(c(model$df.residual, deviance(model)), 2))
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
paste0(c("model df: ", "Residual deviance: "),     # resid deviance should be close to residual df
round(c(model$df.residual, deviance(model)), 2))
model$null.deviance
model$deviance
qresiduals(model)
statmod::qresiduals(model)  # compute the deviance residuals for the poisson regression model
# quantile residuals (GLM diagnostics)
qr <- statmod::qresiduals(model)
qqnorm(qr)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#  NRES 710, Lecture 8 ---------------------------------------
#   University of Nevada, Reno
#
#    GLM and GLMM
# logistic regression ----------------------
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-5 + 0.26*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
layout(matrix(1:4,nrow=2,byrow=2))
plot(lm(response~predictor))
probs <- runif(10)
probs
data.frame(
p = probs,
logit.p=log(probs/(1-probs))
)
## conduct logistic regression:
mydat <- data.frame(response=response,predictor=predictor)
model <- glm(response~predictor,family=binomial(link="logit"),data=mydat)    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(response~predictor)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response (logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
# quantile residuals (GLM diagnostics)
qr <- statmod::qresiduals(model)
qqnorm(qr)
abline(0,1)
plot(qr~predict(model))
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta",show_distribution = T)
# Count regression example ------------------------------
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)     # make up data!
plot(response~predictor)
abline(lm(response~predictor))
par(mfrow=c(2,2))
plot(lm(response~predictor))
## try Poisson count regression model!
mydat <- mydat <- data.frame(response=response,predictor=predictor)
model <- glm(response~predictor,family=poisson(link="log"),data=mydat)
summary(model)
plot(response~predictor,data=mydat)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta")
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(1000,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(x=mean,y=value)) +
geom_boxplot(aes(group=mean))
# quantile residuals (GLM diagnostics)
qr <- statmod::qresiduals(model)
qqnorm(qr)
abline(0,1)
plot(qr~predict(model))
library(statmod)
?qresiduals
library(DHARMa)
simresids <- simulateResiduals(model,n=250,plot=T)   # clearly this is a bad fit!
plotResiduals(simresids,predictor)   # look for patterns across a predictor variable
testResiduals(simresids)  # run tests on the residuals!
statmod::qresiduals(model)
library(MASS)
## NOTE: in reality you should use glm.nb because you don't know the additional parameter theta!
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
## try NegBinom count regression model!
library(MASS)
## NOTE: in reality you should use glm.nb because you don't know the additional parameter theta!
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
simresids <- simulateResiduals(model,n=250,plot=T)   # looks a lot better!
testResiduals(simresids)  # run tests on the residuals!
# AIC model selection ----------------------
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor1+0.01*predictor2),size=2)
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,logLik),
AIC = sapply(cand.set,AIC)
)
AICtab$DeltaAIC <- abs(AICtab$AIC-min(AICtab$AIC))
AICtab[order(AICtab$DeltaAIC,decreasing = F),]
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
rmd2rscript("LECTURE8.Rmd")
rmd2rscript("LECTURE8.Rmd")
rmd2rscript("LECTURE9.Rmd")
rmd2rscript("LECTURE8.Rmd")
exp(-2)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#  NRES 710, Lecture 8 ---------------------------------------
#   University of Nevada, Reno
#
#    GLM
# logistic regression ----------------------
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-5 + 0.26*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
layout(matrix(1:4,nrow=2,byrow=2))
plot(lm(response~predictor))
probs <- runif(10)
probs
data.frame(
p = probs,
logit.p=log(probs/(1-probs))
)
## conduct logistic regression:
mydat <- data.frame(response=response,predictor=predictor)
model <- glm(response~predictor,family=binomial(link="logit"),data=mydat)    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(response~predictor)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response (logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
# quantile residuals (GLM diagnostics)
qr <- statmod::qresiduals(model)
qqnorm(qr)
abline(0,1)
plot(qr~predict(model))
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta",show_distribution = T)
# Count regression example ------------------------------
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)     # make up data!
plot(response~predictor)
abline(lm(response~predictor))
par(mfrow=c(2,2))
plot(lm(response~predictor))
## try Poisson count regression model!
mydat <- mydat <- data.frame(response=response,predictor=predictor)
model <- glm(response~predictor,family=poisson(link="log"),data=mydat)
summary(model)
plot(response~predictor,data=mydat)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
## display formula!
library(equatiomatic)
equatiomatic::extract_eq(model,wrap=T,intercept = "beta")
# Demo: heteroskedasticity in Poisson distrubution
library(tidyverse)
library(ggplot2)
thisdat <- sapply(1:15,function(t) rpois(1000,lambda=t) )
thisdat <- thisdat %>%
as_tibble(.name_repair = "unique") %>%
rename_with( ~str_extract(.x,pat="(\\d)+")) %>%
pivot_longer(cols=everything(),names_to = "mean", values_to = "value",names_transform = as.numeric)
ggplot(thisdat,aes(x=mean,y=value)) +
geom_boxplot(aes(group=mean))
overdisp_fun <- function(model) {    # function from Ben Bolker...
rdf <- df.residual(model)
rp <- residuals(model,type="pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
c(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
}
overdisp_fun(model)
options(scipar=15)
overdisp_fun(model)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE8.Rmd")
