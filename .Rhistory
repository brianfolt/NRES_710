hist(my.data.nonnorm,main="non-normal")     # visualize the data distribution
qqnorm(my.data.nonnorm,main="non-normal")   # visual test for normality
x <- qqnorm(my.data.nonnorm,main="non-normal")
x
x <- qqnorm(rgamma(20,0.1,0.1),main="non-normal")
x <- qqnorm(rgamma(5,0.1,0.1),main="non-normal")
x
qnorm(x$y[1],mean(x$y),sd(x$y))
qnorm(x$y[2],mean(x$y),sd(x$y))
?ppoints
ppoints(10)
ppoints(100)
qunif(ppoints(100))
x
ppoints(5)
qnorm(ppoints(5))
# full power analysis:   ------------
# First we will set the population parameters:
true.mean.A <- 13.5
true.mean.B <- 13.9
true.sd <- 3.4
# Assume a two-tailed test- alternative hypothesis is that the mean of A is different from the mean of B
# Now let's set the sampling scenario
sampsize.A <- 10
sampsize.B <- 12
# now we will simulate LOTS of  'experiments'
pvals <- numeric(1000)
for(i in 1:1000){
samp.A <- rnorm(sampsize.A,true.mean.A,true.sd)
samp.B <- rnorm(sampsize.B,true.mean.B,true.sd)
# and now we can run a test!
this.test <- t.test(samp.A,samp.B,var.equal = T)
# and determine if we rejected our null hypothesis (which we know is not true!)
pvals[i] <- this.test$p.value
}
# hist(pvals)
length(which(pvals<0.05))/1000
# full power analysis WITH SAMPLE SIZE DETERMINATION:   --------
# First we will set the population parameters:
true.mean.A <- 13.5
true.mean.B <- 13.9
true.sd <- 3.4
# Assume a two-tailed test- alternative hypothesis is that the mean of A is different from the mean of B
# now we will simulate LOTS of  'experiments' under different sample sizes
sampsize <- seq(5,400,10)
power <- numeric(length(sampsize))
for(j in 1:length(sampsize)){
pvals <- numeric(1000)
for(i in 1:1000){
samp.A <- rnorm(sampsize[j],true.mean.A,true.sd)
samp.B <- rnorm(sampsize[j],true.mean.B,true.sd)
# and now we can run a test!
this.test <- t.test(samp.A,samp.B,var.equal = T)
# and determine if we rejected our null hypothesis (which we know is not true!)
pvals[i] <- this.test$p.value
}
# hist(pvals)
power[j] <- length(which(pvals<0.05))/1000
}
names(power) <- sampsize
plot(power~sampsize)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
12500/5
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#  NRES 710, Lecture 4
#  University of Nevada, Reno
#
#      t-tests and z-tests
## Paired t-test example -----------------
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic- you can reject the null if your value is more extreme than this!
p=pt(t.statistic,sample.size-1)    # p value
p    # this is the p value
options(scipen=100)   # if you don't like scientific notation!
p
# Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p-value!
# difference between t and standard normal
library(ggplot2)
base = ggplot() + xlim(-5,5) + geom_function(aes(col="normal (z)"), fun=dnorm, lwd=2) + labs(y="density",x="potential fake signal")
deg_free <- 1
base + geom_function(aes(col=sprintf("t, df = %s",deg_free)), fun=dt, args=list(df=deg_free), lwd=2,alpha=0.5)
# base r plotting alternative!:
# curve(dnorm,-5,5,ylab="density",xlab="fake signal")
# curve(dt(x,df=1),add=T,col="green")
# z distribution --------------------
## z test
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
mean.pop <- 79
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- mean.pop   # null: GSW are sampled randomly from the pool of all NBA players. They are not fundamentally different!
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)    # we assume that the z statistic is normally distributed- standard normal!
abline(v=z.statistic,col="green",lwd=3)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
pnorm(z.statistic)
# one sample t-test (paired t-test is a type of one sample t-test)  -------------
sample.data <- rgamma(10,2,.1)
null.mean <- 10
sample.size <- length(sample.data)
sample.mean <- mean(sample.data)
sample.sd <- sd(sample.data)
std.err <- sample.sd/sqrt(sample.size)
t.stat <- (sample.mean-null.mean)/std.err
t.crit <- abs(qt(0.025,sample.size-1))   # for 2-tailed test
p.val <- (1-pt(abs(t.stat),sample.size-1))*2   #
### alternatively use the t.test function:
t.test(sample.data,mu=null.mean)   # should get the same answer!
1/sample.size.1+1/sample.size.2
sample.data.1 <- rnorm(15,55,10)
sample.data.2 <- rnorm(10,45,10)
sample.size.1 <- length(sample.data.1)
sample.size.2 <- length(sample.data.2)
sample.size.pooled <- length(sample.data.1) + length(sample.data.2)
sample.mean1 <- mean(sample.data.1)
sample.mean2 <- mean(sample.data.2)
sample.sd1 <- sd(sample.data.1)
sample.sd2 <- sd(sample.data.2)
sample.sd.pooled <- sqrt(((sample.size.1-1)*sample.sd1^2 + (sample.size.2-1)*sample.sd2^2)/(sample.size.pooled-2))
1/sample.size.1+1/sample.size.2
1/sample.size.1
1/sample.size.2
std.err.pooled <- sample.sd.pooled*sqrt(1/sample.size.1+1/sample.size.2)
std.err.pooled
sample.sd.pooled/sqrt(sample.size.pooled)
sample.sd.pooled/sqrt(sample.size.pooled)*2
sample.sd.pooled/sqrt(mean(sample.size.1,sample.size.2))
sample.sd.pooled/sqrt(sample.size.pooled/2)
# two sample t-test -----------------
sample.data.1 <- rnorm(15,55,10)
sample.data.2 <- rnorm(10,45,10)
sample.size.1 <- length(sample.data.1)
sample.size.2 <- length(sample.data.2)
sample.size.pooled <- length(sample.data.1) + length(sample.data.2)
sample.mean1 <- mean(sample.data.1)
sample.mean2 <- mean(sample.data.2)
sample.sd1 <- sd(sample.data.1)
sample.sd2 <- sd(sample.data.2)
sample.sd.pooled <- sqrt(((sample.size.1-1)*sample.sd1^2 + (sample.size.2-1)*sample.sd2^2)/(sample.size.pooled-2))
std.err.pooled <- sample.sd.pooled*sqrt(1/sample.size.1+1/sample.size.2)
t.stat <- (sample.mean1-sample.mean2)/std.err.pooled
t.crit <- abs(qt(0.025,sample.size-1))   # for 2-tailed test
p.val <- (1-pt(abs(t.stat),sample.size.pooled-2))*2   # 2-tailed test
### alternatively use the t.test function:
t.test(sample.data.1,sample.data.2,var.equal = T)   # should get the same answer!
t.test(sample.data.1,sample.data.2,var.equal = T)   # should get the same answer!
# one vs two tailed demo
#my.data <- rnorm(15, 0.5, 1)   # generate sample data
my.data <- c(0.20119786,1.41700898,-0.72426698,0.44006284,0.01487128,-0.19031680,1.75470699,-0.81992816,2.31978530,  2.71442595,-0.31461411,0.52086138,-0.50580117,1.52260888,0.76454698)
samp.mean <- mean(my.data)
samp.sd <- sd(my.data)
samp.n <- length(my.data)
std.err <- samp.sd/sqrt(samp.n)
null.mean <- 0
t.statistic <- (samp.mean-null.mean)/std.err
### Two-tailed
curve(dt(x,samp.n-1),-3,3, main="Meaning of more extreme (two tailed version)",
ylab="probability density",xlab="t statistic")    # visualize the sampling distribution of the t-statistic
abline(v=t.statistic,lwd=2,col="blue")
xs <- seq(abs(t.statistic),10,0.05)
ys <- dt(xs,samp.n-1)
polygon(x=c(xs,rev(xs)),y=c(ys,rep(0,times=length(ys))),col="green",border=NA)
polygon(x=c(-xs,rev(-xs)),y=c(ys,rep(0,times=length(ys))),col="green",border=NA)
p.twosided <- pt(-abs(t.statistic),samp.n-1)*2     # two-tailed p-value
text(-2,0.3,paste("p =",round(p.twosided,4)))
### One-sided (alternative = 'greater')
curve(dt(x,samp.n-1),-3,3, main="Meaning of more extreme (one tailed version: greater than)",
ylab="probability density",xlab="t statistic")    # visualize the sampling distribution of the t-statistic
abline(v=t.statistic,lwd=2,col="blue")
xs <- seq(t.statistic,10,0.05)
ys <- dt(xs,samp.n-1)
polygon(x=c(xs,rev(xs)),y=c(ys,rep(0,times=length(ys))),col="green",border=NA)
p.onesided <- pt(-abs(t.statistic),samp.n-1)     # one-tailed p-value
text(-2,0.3,paste("p =",round(p.onesided,4)))
### t-crit in one tailed vs two tailed test
sample.size=7
curve(dt(x,sample.size-1),-8,4, main="2-tailed vs 1-tailed critical value",
xlab="t-statistic",ylab="probability density")
alpha <- 0.1
t.crit.twosided <- qt(alpha/2,sample.size-1)
abline(v=c(t.crit.twosided,abs(t.crit.twosided)),col="red",lwd=2)
t.crit.twosided <- qt(alpha/2,sample.size-1)
abline(v=c(t.crit.twosided,abs(t.crit.twosided)),col="red",lwd=2)
t.crit.onesided <- qt(alpha,sample.size-1)
abline(v=abs(t.crit.onesided),col="green",lwd=2)
abline(v=t.crit.onesided,col="blue",lwd=2)
legend("topleft",lwd=c(2,2,2),col=c("red","green","blue"),bty="n",legend=c("two-tailed crit value","one-tailed crit value (greater than)","one-tailed crit value (less than)"))
?bartlett.test
bartlett.test(list(group1,group2))
# are the variances equal?
group1 <- c(7,9,6,6,6,11,6,3,8,7)
group2 <- c(11,13,8,6,14,11,13,13,10,11)
bartlett.test(list(group1,group2))
car::levene.test(list(group1,group2))
car::leveneTest(list(group1,group2))
?car::leveneTest
bartlett.test(list(group1,group2))
car::leveneTest(c(group1,group2),rep("group1","group2",each=10))
c(group1,group2)
rep("group1","group2",each=10)
car::leveneTest(c(group1,group2),rep(c("group1","group2"),each=10))
my.data1 <- rgamma(20,0.1,0.1)-2
my.data2 <- rgamma(20,0.2,0.1)-2
median(my.data1)
median(my.data2)
wilcox.test(my.data1,my.data2)
t.test(my.data1,my.data2)   # t-test for comparison
allobs <- c(my.data1,my.data2)
inorder <- order(allobs)
inorder
my.data1
my.data2
t.test(my.data1,my.data2)   # t-test for comparison
allobs <- c(my.data1,my.data2)
inorder <- order(allobs)
rank1 <- inorder[1:20]
rank2 <- inorder[21:40]
t.test(rank1,rank2,var.equal = T)    # perform t-test on the ranks (usually similar to Mann-Whitney test)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE4.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#  NRES 710, Lecture 4
#  University of Nevada, Reno
#
#      t-tests and z-tests
## Paired t-test example -----------------
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic- you can reject the null if your value is more extreme than this!
p=pt(t.statistic,sample.size-1)    # p value
p    # this is the p value
options(scipen=100)   # if you don't like scientific notation!
p
# Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p-value!
# difference between t and standard normal
library(ggplot2)
base = ggplot() + xlim(-5,5) + geom_function(aes(col="normal (z)"), fun=dnorm, lwd=2) + labs(y="density",x="potential fake signal")
deg_free <- 1
base + geom_function(aes(col=sprintf("t, df = %s",deg_free)), fun=dt, args=list(df=deg_free), lwd=2,alpha=0.5)
# base r plotting alternative!:
# curve(dnorm,-5,5,ylab="density",xlab="fake signal")
# curve(dt(x,df=1),add=T,col="green")
# z distribution --------------------
## z test
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
mean.pop <- 79
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- mean.pop   # null: GSW are sampled randomly from the pool of all NBA players. They are not fundamentally different!
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)    # we assume that the z statistic is normally distributed- standard normal!
abline(v=z.statistic,col="green",lwd=3)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
pnorm(z.statistic)
# one sample t-test (paired t-test is a type of one sample t-test)  -------------
sample.data <- rgamma(10,2,.1)
null.mean <- 10
sample.size <- length(sample.data)
sample.mean <- mean(sample.data)
sample.sd <- sd(sample.data)
std.err <- sample.sd/sqrt(sample.size)
t.stat <- (sample.mean-null.mean)/std.err
t.crit <- abs(qt(0.025,sample.size-1))   # for 2-tailed test
p.val <- (1-pt(abs(t.stat),sample.size-1))*2   #
### alternatively use the t.test function:
t.test(sample.data,mu=null.mean)   # should get the same answer!
sample.data.1 <- rnorm(15,55,10)
sample.data.2 <- rnorm(10,45,10)
sample.size.1 <- length(sample.data.1)
sample.size.2 <- length(sample.data.2)
sample.size.pooled <- length(sample.data.1) + length(sample.data.2)
sample.mean1 <- mean(sample.data.1)
sample.mean2 <- mean(sample.data.2)
sample.sd1 <- sd(sample.data.1)
sample.sd2 <- sd(sample.data.2)
sample.sd.pooled <- sqrt(((sample.size.1-1)*sample.sd1^2 + (sample.size.2-1)*sample.sd2^2)/(sample.size.pooled-2))
std.err.pooled <- sample.sd.pooled*sqrt(1/sample.size.1+1/sample.size.2)
t.stat <- (sample.mean1-sample.mean2)/std.err.pooled
t.crit <- abs(qt(0.025,sample.size.pooled-2))   # for 2-tailed test
p.val <- (1-pt(abs(t.stat),sample.size.pooled-2))*2   # 2-tailed test
t.test(sample.data.1,sample.data.2,var.equal = T)   # should get the same answer!
t.crit
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
## Chi squared goodness-of-fit example
birthdays.bymonth <- c(40,23,33,39,28,29,45,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories (months)
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)   # compute the expected number under the null hypothesis.
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
p <- 1-pchisq(Chisq.stat,k-1)
p
### use R's built in chi squared function
chisq.test(birthdays.bymonth)     # should get the same p value!
## Chi squared goodness-of-fit example
birthdays.bymonth <- c(40,23,33,39,28,29,45,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories (months)
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)   # compute the expected number under the null hypothesis.
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
p <- 1-pchisq(Chisq.stat,k-1)
p
### use R's built in chi squared function
chisq.test(birthdays.bymonth)     # should get the same p value!
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
plogis(-3.798)
airquality
pairs(airquality)
pairs(airquality, panel.smooth=T)
?pairs
pairs(airquality, panel=panel.smooth)
pairs(airquality, lower.panel=panel.smooth)
panel.hist <- function(x, ...)
{
usr <- par("usr")
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(airquality, lower.panel=panel.smooth,upper.panel = panel.hist)
pairs(airquality, lower.panel=panel.smooth,diag.panel = panel.hist)
cor(airquality[,-"Ozone"])
cor(airquality[,setdiff("Ozone",names(airquality))])
cor(airquality[,setdiff("Ozone",names(airquality))])
setdiff("Ozone",names(airquality))
setdiff("Ozone",names(airquality))
names(airquality)
setdiff(names(airquality),"Ozone")
cor(airquality[,setdiff(names(airquality),"Ozone")])
cor(airquality[,setdiff(names(airquality),"Ozone")],use=”pairwise.complete.obs)
cor(airquality[,setdiff(names(airquality),"Ozone")],use="pairwise.complete.obs")
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
