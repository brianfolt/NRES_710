group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]]
)
temp$dif = all_means[thispair[1]]-all_means[thispair[2]]
temp$qstat = abs(temp$dif)/std.err
temp$pval = 1-ptukey(temp$qstat,nmeans=n.groups,df=(sample.size-n.groups))
results <- rbind(results,temp)
}
results
?TukeyHSD
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
results
library(car)
install.packages("emmeans")
library(emmeans)
emmeans(model1)
?emmeans
model1 <- lm(Height~Treatment,data=df)
emmeans(model1,specs=c("Treatment"))
TukeyHSD(model1)
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
pairs(emm)
model1 <- lm(Height~Treatment,data=df)
emm <- emmeans(model1,specs=c("Treatment"))  # compute the treatment means with 'emmeans'
pairs(emm)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)
plant.av <- aov(plant.lm)
plant.av
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # make anova table
plant.av
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
plot(plant.lm)
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2))
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
plot(plant.av)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
TukeyHSD(plant.av)
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
emm
pairs(emm)    # run tukey test!
emm@post.beta
emm@model.info
emm@grid
emm@grid
emm@grid
emm@levels
emm@matlevs
emm@roles
plot(emm)
str(emm)
emm@linfct
toplot <- emm[1,]
emm[1,]
toplot <- as.matrix(emm[,c("group","emmean","lower.CL","upper.CL")])
emm[,c("group","emmean","lower.CL","upper.CL")]
as.matrix(emm)
emm[1,]
emm[1:3,]
emm[,c("group","emmean","lower.CL","upper.CL")]
emm@V
summary(emm)
toplot <- as.matrix(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
toplot
rownames(toplot) <- toplot$group
xvals <- barplot(toplot$emmean)
?barplot
toplot$emmean
xvals <- barplot(toplot$emmean,names.arg = toplot$group)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
?arrows
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(2,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
layout(matrix(1,nrow=1,byrow = T))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
######
# add confidence interval on the regression line
newdata <- data.frame(
light = seq(20,80,1)
)
my.predict <- predict(model, newdata = newdata, interval = "confidence")
lines(newdata$light,my.predict[,"upr"],col="red",lty=2)   # add upper bound
######
# add confidence interval on the regression line
newdata <- data.frame(
light = seq(20,80,1)
)
my.predict <- predict(model, newdata = newdata, interval = "confidence")
plot(hatchlings.successful~light)  # plot the data
abline(intercept,slope,col="blue")
lines(newdata$light,my.predict[,"upr"],col="red",lty=2)   # add upper bound
lines(newdata$light,my.predict[,"lwr"],col="red",lty=2)   # add lower bound
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(agricolae)
data("PlantGrowth")
head(PlantGrowth)
data("ToothGrowth")
head(ToothGrowth)
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
?interaction.plot
ordered(dose)
ToothGrowth$dose <- ordered(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
ToothGrowth$dose
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
ToothGrowth$dose
table(ToothGrowth$dose)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
summary(model_with_interaction)
data("ToothGrowth")
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)   # three doses, two types of supplements
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
summary(model_with_interaction)
data("ToothGrowth")
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)   # three doses, two types of supplements
ToothGrowth$dose <- ordered(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
with(ToothGrowth, {   # the "with" function allows you to only specify the name of the data frame once, and then refer to the columns of the data frame as if they were variables in your main environment
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, leg.bty = "o")
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, type = "p")
})
interaction.plot(dose, supp, len, fixed = TRUE, col = c("red","blue"), leg.bty = "o")
with(ToothGrowth, {   # the "with" function allows you to only specify the name of the data frame once, and then refer to the columns of the data frame as if they were variables in your main environment
interaction.plot(dose, supp, len, fixed = TRUE, col = c("red","blue"), leg.bty = "o")
})
anova(model)
anova(model_with_interaction)
TukeyHSD(model, "dose")
TukeyHSD(anova(model), "dose")
TukeyHSD(aov(model), "dose")
?emmeans
TukeyHSD(aov(model_with_interaction), "dose")   # run tukey test for the 'dose' variable in the ToothGrowth model
?TukeyHSD
leastsquare = lsmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
library(lsmeans)
leastsquare = lsmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
cld(leastsquare,
alpha=.05,
Letters=letters)
library(multcompView)
cld(leastsquare,
alpha=.05,
Letters=letters)
leastsquare
library(multcomp)
cld(leastsquare,
alpha=.05,
Letters=letters)
?emmeans
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
library(emmeans)
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
CLD(leastsquare,
alpha=.05,
Letters=letters)
?cld.emmGrid
pwpm(leastsquare)
pwpm(emm)
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
emm
class(emm)
pwpm(pairs(emm))
emm = emmeans(model_with_interaction,
specs= pairwise ~ dose:supp)
pwpm(emm)
library(emmeans)
emm = emmeans(model_with_interaction,
specs= pairwise ~ dose:supp)
multcomp::cld(emm)
pwpp(emm)
plot(emm)
summary(emm)
pairs(emm)
contrast(emm)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
#### ANOVA as regression example
data(iris)    # load the iris dataset
plot(iris$Sepal.Length ~ iris$Species)   # r uses a boxplot by default for categorical predictor
my.mod <- lm(Sepal.Length~Species,data=iris)    # run an ANOVA!
summary(my.mod)    # look at the results
anova(my.mod)     # produce an analysis of variance table
####
# alternative!
my.mod <- aov(Sepal.Length~Species,data=iris)   # same model!!
summary(my.mod)     # but produces an anova table by default
?DNase
# ?nls
data(DNase)
plot(DNase$density~DNase$conc)   # looks non-linear!
### run linear regression model
model1 <- lm(density~conc,data=DNase)
### run diagnostic plots
par(mfrow=c(2,2))
plot(model1)     # clear non-linearity (and non-normal residuals, and heteroskedasticity!)
par(mfrow=c(1,1))      # plot data with regression line - obvious issues!
plot(DNase$density~DNase$conc)
abline(model1)
### run non-linear regression model - use saturation curve
model2 <- nls(density ~ (max*conc)/(K+conc),data=DNase,start=list(max=2,K=0.25))
summary(model2)
### run non-linear regression model - use logistic function
model3 <- nls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),
data = DNase,
start = list(Asym = 3, xmid = 0, scal = 1))
summary(model3)
plot(DNase$density~DNase$conc)
abline(model1)
concs.toplot <- seq(0.01,14,0.1)
densities.toplot <- predict(model2,newdata=data.frame(conc=concs.toplot))
lines(concs.toplot,densities.toplot,col="blue")
densities.toplot <- predict(model3,newdata=data.frame(conc=concs.toplot))
lines(concs.toplot,densities.toplot,col="red")
legend("topleft",lty=c(1,1,1),col=c("black","blue","red"),legend=c("linear",
"saturation","logistic"))
summary(model2)
plot(DNase$density~DNase$conc)
summary(model3)
summary(model2)
model2 <- nls(density ~ (max*conc)/(K+conc),data=DNase,start=list(max=2,K=1))
summary(model2)
plot(DNase$density~DNase$conc)
plot(model3)
predict(model3)
resids <- DNase$density-predict(model3)
qqnorm(resids)
shapiro.test(resids)
## check for heteroskedasticity
plot(resids~predict(model3))
##########
# heteroskedasticity
##### first, simulate data with heteroskedastic residuals
simulated.x <- runif(100,0.1,5)
simulated.y <- exp(rnorm(100,1.1+0.3*simulated.x,0.7))
plot(simulated.y~simulated.x)
### run linear model
model1 <- lm(simulated.y~simulated.x)
par(mfrow=c(2,2))
plot(model1)  # run diagnostic plots    heteroskedasticity issues
### run linear model with log transformation of response variable
model2 <- lm(log(simulated.y)~simulated.x)
par(mfrow=c(2,2))
plot(model2)  # run diagnostic plots - no issues!
simulated.x <- runif(100,0.1,5)
simulated.y <- exp(rnorm(100,1.1+0.3*simulated.x,0.7))
plot(simulated.y~simulated.x)
### run linear model
model1 <- lm(simulated.y~simulated.x)
par(mfrow=c(2,2))
plot(model1)  # run diagnostic plots    heteroskedasticity issues
residuals(model3)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
model.matrix(iris$Sepal.Length~iris$Species)
?emmeans
36/2
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
