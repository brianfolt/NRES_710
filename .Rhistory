par(mfrow=c(2,1))
par(mfcol=c(2,1))
par(mfcol=c(2,1))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean responseW",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean responseW",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,exp(3-0.4*predictor))
?rnbinom
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.4*predictor),size=2)
response
plot(response~predictor)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
abline(lm(response~predictor))
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
abline(lm(response~predictor))
par(mfrow=c(2,2))
plot(lm(response~predictor))
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
## try Poisson count regression model!
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T)
lines(newdat$predictor,mypred$fit,col="blue",newdata=newdat)
## try Poisson count regression model!
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
residuals(model)
residuals(model,type="deviance")
summary(residuals(model))
paste0(c("Null deviance: ", "Residual deviance: "),
round(c(model$null.deviance, deviance(model)), 2))
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
deviance(model)
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
model$df.residual
paste0(c("model df: ", "Residual deviance: "),     # resid deviance should be close to residual df
round(c(model$df.residual, deviance(model)), 2))
library(DHARMa)
simresids <- simulateResiduals(model,n=250,plot=T)
plotResiduals(simresids,predictor)
testResiduals(simresids)
?glm
library(MASS)
model <- glm(response~predictor,family=negbin(link="log"))
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
## try NegBinom count regression model!
library(MASS)
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
?negative.binomial
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
## try NegBinom count regression model!
library(MASS)
## NOTE: in reality you should use glm.nb because you don't know the additional parameter theta!
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
simresids <- simulateResiduals(model,n=250,plot=T)   # clearly this is a bad fit!
plotResiduals(simresids,predictor)   # look for patterns across a predictor variable
simresids <- simulateResiduals(model,n=250,plot=T)   # clearly this is a bad fit!
testResiduals(simresids)  # run tests on the residuals!
library(AICcmodavg)
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
predictor3 <- rnorm(30)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
library(AICcmodavg)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
library(AICcmodavg)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
aictab(cand.set)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,LogLik),
AIC = sapply(cand.set,AIC)
)
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,logLik),
AIC = sapply(cand.set,AIC)
)
AICtab
AICtab$DeltaAIC <- abs(AICtab$AIC-min(AICtab$AIC))
AICtab$DeltaAIC
AICtab[order(AICtab$DeltaAIC,decreasing = F),]
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor1+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,logLik),
AIC = sapply(cand.set,AIC)
)
AICtab$DeltaAIC <- abs(AICtab$AIC-min(AICtab$AIC))
AICtab[order(AICtab$DeltaAIC,decreasing = F),]
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
mc1 <- read.csv("tundra.txt",sep=",",na.strings=c("-","NA"))
summary(mc1)
table(mc1$Year)
table(mc1$Site)
library(ggplot2)
ggplot(mc1,aes(x=Year,y=GS.NEE,colour=Site))+geom_point()+
geom_smooth(method="lm",alpha=0.3)+
scale_y_continuous(limits=c(-150,400),oob=scales::squish)+
scale_colour_orig(guide="none")
ggplot(mc1,aes(x=Year,y=GS.NEE,colour=Site))+geom_point()+
geom_smooth(method="lm",alpha=0.3)+
scale_y_continuous(limits=c(-150,400),oob=scales::squish)
ggplot(mc1,aes(x=Year,y=GS.NEE,colour=Site))+geom_point()+
geom_smooth(method="lm",alpha=0.3)+
scale_y_continuous(limits=c(-150,400),oob=scales::squish)+
scale_colour_brewer(guide="none")
ggplot(mc1,aes(x=Year,y=GS.NEE,colour=Site))+geom_point()+
geom_smooth(method="lm",alpha=0.3)+
scale_y_continuous(limits=c(-150,400),oob=scales::squish)
?lme
aggfun <- function(dat,agg=c("Year","Site"),response="Winter.adj",
baseYear=min(mc1$Year)) {
## select only site, year, and response
sub1 <- na.omit(dat[,c("Site","Year",response)])
## compute means of non-aggregation variables
agg1 <- aggregate(sub1[!names(sub1) %in% agg],by=sub1[agg],FUN=mean)
## compute sample size of non-aggregation variables
aggn <- aggregate(sub1[response],by=sub1[agg],FUN=length)
names(aggn)[ncol(aggn)] <- "n"   ## assumes response is last column
## put mean and sample size together
agg2 <- merge(agg1,aggn)
## recompute centred year
agg2$cYear <- agg2$Year - baseYear
agg2
}
mc2 <- aggfun(mc1,response="GS.NEE")
## center year at the mean rather than the date of
## the first observation:
mc2B <- aggfun(mc1,response="GS.NEE",baseYear=mean(mc1$Year))
write.csv(mc2B,"tundra2.csv")
mc1 <- read.csv("tundra2.csv",sep=",",na.strings=c("-","NA"))
summary(mc1)
table(mc1$Year)  # some years have many observations
table(mc1$Site)  # some sites have many observations
ggplot(mc1,aes(x=Year,y=GS.NEE,colour=Site))+geom_point()+
geom_smooth(method="lm",alpha=0.3)+
scale_y_continuous(limits=c(-150,400),oob=scales::squish)
cmod_lmer <- lmer(GS.NEE ~ cYear + (1+cYear|Site),
data=mc2d, weights=n)
library(lme4)
cmod_lmer <- lmer(GS.NEE ~ cYear + (1+cYear|Site),
data=mc2d, weights=n)
cmod_lmer <- lmer(GS.NEE ~ cYear + (1+cYear|Site),
data=mc1, weights=n)
summary(cmod_lmer)
library(glmmTMB)
cmod_glmmTMB <- glmmTMB(GS.NEE ~ cYear + (1+cYear|Site),
data=mc2B,
weights=n)
summary(cmod_glmmTMB)
dwplot(list(glmmTMB=cmod_glmmTMB,lmer=cmod_lmer),by_2sd=TRUE)
colvec <- c("#ff1111","#007eff") ## second colour matches lattice default
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2]),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(cmod_lmer,abline=c(0,1),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2])))
library(gridExtra)
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2]),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(cmod_lmer,abline=c(0,1),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2])))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2]),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
col=ifelse(mc2$Site=="Toolik, AK",colvec[1],colvec[2]),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
cmod_glmmTMB <- glmmTMB(GS.NEE ~ cYear + (1+cYear|Site),
data=mc1,
weights=n)
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
col=ifelse(mc1$Site=="Toolik, AK",colvec[1],colvec[2]),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(cmod_lmer,abline=c(0,1),
col=ifelse(mc1$Site=="Toolik, AK",colvec[1],colvec[2])))
qqnorm(cmod_lmer,abline=c(0,1),
col=ifelse(mc1$Site=="Toolik, AK",colvec[1],colvec[2]))
mc1$Site
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(cmod_lmer,abline=c(0,1)))
cmod_lmer
residuals(cmod_lmer)
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(residuals(cmod_lmer),abline=c(0,1)))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
qqnorm(residuals(cmod_lmer),abline=c(0,1))
qqnorm(residuals(cmod_lmer))
qqnorm(cmod_glmmTMB)
residuals(cmod_lmer,"standardized")
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(residuals(cmod_lmer,"pearson")))
residuals(cmod_lmer,"pearson")
qqnorm(residuals(cmod_lmer,"pearson"))
?residuals
?residuals.merMod
residuals(cmod_lmer,"pearson",T)
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(residuals(cmod_lmer,"pearson",T)))
(plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
qqnorm(residuals(cmod_lmer,"pearson",T))
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(residuals(cmod_lmer,"pearson",T)))
grid.arrange(plot(cmod_lmer,type=c("p","smooth")),
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid)))),
## "sqrt(abs(resid(x)))"),
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth")),
qqnorm(residuals(cmod_lmer,"pearson",T)))
layout(matrix(1:4,nrow=2,byrow = T))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
qqnorm(residuals(cmod_lmer,type="pearson",scaled=T))
colvec <- c("#ff1111","#007eff") ## second colour matches lattice default
layout(matrix(1:4,nrow=2,byrow = T))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
qqnorm(residuals(cmod_lmer,type="pearson",scaled=T))
plot(cmod_lmer,type=c("p","smooth"))
matrix(c(1:4),nrow=2,byrow = T)
colvec <- c("#ff1111","#007eff") ## second color matches lattice default
layout(matrix(c(1:4),nrow=2,byrow = T))
plot(cmod_lmer,type=c("p","smooth"))
plot(cmod_lmer,sqrt(abs(resid(.)))~fitted(.),
type=c("p","smooth"),ylab=expression(sqrt(abs(resid))))
plot(cmod_lmer,resid(.,type="pearson")~cYear,
type=c("p","smooth"))
qqnorm(residuals(cmod_lmer,type="pearson",scaled=T))
dotplot(ranef(cmod_lmer,condVar=TRUE),
lattice.options=list(layout=c(1,2)))
library(lattice)
dotplot(ranef(cmod_lmer,condVar=TRUE),
lattice.options=list(layout=c(1,2)))
summary(cmod_lmer)
library(car)
Anova(cmod_lmer)
confint(cmod_lmer)
suppressMessages(confint(cmod_lmer))
suppressWarnings(confint(cmod_lmer))
confint(cmod_lmer,parm="beta_",method="Wald")
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
