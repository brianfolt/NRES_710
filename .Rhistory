mse <- sse/(sample.sd-n.groups)
mse
residual.var
sum(residual.var)
unexplained.var
explained.var
summary(model1)
all_levels <- levels(df$Treatment)
mse <- sse/(sample.size-n.groups)  # compute mean squared error across experiment
mse
sse <- Reduce('+',lapply(temp,function(x) (length(x[,1])-1)*sd(x[,1])^2 ))
mse <- sse/(sample.size-n.groups)  # compute mean squared error across experiment
q.value <- qtukey(p=0.95,nmeans=n.groups,df=(sample.size-n.groups))
q.value
explained.var
unexplained.var
# find honestly significant difference
tukey.hsd <- q.value * sqrt(unexplained.var/(sample.size/n.groups))
tukey.hsd
all_levels <- levels(df$Treatment)
all_levels
pair_totry <- matrix(c(1,2,1,3,2,3),nrow=3,byrow = T)
pair_totry
thispair <- pair_totry[1,]
mean(df$Height[df$Treatment==all_levels[1]])
dif.between.means <- mean(df$Height[df$Treatment==all_levels[thispair[1]]])-mean(df$Height[df$Treatment==all_levels[thispair[2]]])
thispair <- pair_totry[1,]    # run first pairwise comparison
dif.between.means <- mean(df$Height[df$Treatment==all_levels[thispair[1]]])-mean(df$Height[df$Treatment==all_levels[thispair[2]]])
dif.between.means
pair_totry <- matrix(c(1,2,1,3,2,3),nrow=3,byrow = T)
pair_totry     # these are the pairwise comparisons to make!
all_means <- tapply(df$Height,df$Treatment,mean)
all_means
dif.between.means <- all_means[thispair[1]]-all_means[thispair[2]]
dif.between.means
tukey.hsd
std.err <- sqrt(unexplained.var / 2 * (2 / (sample.size/n.groups)))
### compute p-value!
sample.size.pergroup <- sample.size/n.groups
std.err <- sqrt(unexplained.var / 2 * (2 / sample.size.pergroup))
### compute p-value!
sample.size.pergroup <- sample.size/n.groups
std.err <- sqrt(unexplained.var / 2 * (2 / sample.size.pergroup))
std.err
# first compute q statistic
q.stat <- abs(dif.between.means)/std.err
q.stat
p.val <- ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
p.val
p.val <- 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
p.val
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[1,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(q.stat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif.between.means)/std.err,
pval = 1-ptukey(qstat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]],
dif = all_means[thispair[1]]-all_means[thispair[2]],
qstat = abs(dif)/std.err,
pval = 1-ptukey(qstat,nmeans=n.groups,df=(sample.size-n.groups))
)
results <- rbind(results,temp)
}
results <- NULL
i=1
for(i in 1:nrow(pair_totry)){
thispair <- pair_totry[i,]
temp <- data.frame(
group1 = all_levels[thispair[1]],
group1 = all_levels[thispair[2]]
)
temp$dif = all_means[thispair[1]]-all_means[thispair[2]]
temp$qstat = abs(temp$dif)/std.err
temp$pval = 1-ptukey(temp$qstat,nmeans=n.groups,df=(sample.size-n.groups))
results <- rbind(results,temp)
}
results
?TukeyHSD
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
results
library(car)
install.packages("emmeans")
library(emmeans)
emmeans(model1)
?emmeans
model1 <- lm(Height~Treatment,data=df)
emmeans(model1,specs=c("Treatment"))
TukeyHSD(model1)
########  compare with R's built in tukey test function
model1 <- aov(Height~Treatment,data=df)
TukeyHSD(model1)
pairs(emm)
model1 <- lm(Height~Treatment,data=df)
emm <- emmeans(model1,specs=c("Treatment"))  # compute the treatment means with 'emmeans'
pairs(emm)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)
plant.av <- aov(plant.lm)
plant.av
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # make anova table
plant.av
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
plot(plant.lm)
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2))
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.lm)
plot(plant.av)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
TukeyHSD(plant.av)
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
emm
pairs(emm)    # run tukey test!
emm@post.beta
emm@model.info
emm@grid
emm@grid
emm@grid
emm@levels
emm@matlevs
emm@roles
plot(emm)
str(emm)
emm@linfct
toplot <- emm[1,]
emm[1,]
toplot <- as.matrix(emm[,c("group","emmean","lower.CL","upper.CL")])
emm[,c("group","emmean","lower.CL","upper.CL")]
as.matrix(emm)
emm[1,]
emm[1:3,]
emm[,c("group","emmean","lower.CL","upper.CL")]
emm@V
summary(emm)
toplot <- as.matrix(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))
toplot
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
toplot
rownames(toplot) <- toplot$group
xvals <- barplot(toplot$emmean)
?barplot
toplot$emmean
xvals <- barplot(toplot$emmean,names.arg = toplot$group)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
?arrows
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,8))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(2,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
layout(matrix(1,nrow=1,byrow = T))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.2,6.2,6.2),labels = c("ab","a","b"))
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,6.5))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
library(agricolae)
data("PlantGrowth")
plant.lm <- lm(weight ~ group, data = PlantGrowth)   #run the 'regression' model
plant.av <- aov(plant.lm)  # run anova test and print anova table
plant.av
#######
# evaluate goodness of fit (assumption violations etc)
layout(matrix(1:4,nrow=2,byrow = T))
plot(plant.av)
#######
# run pairwise comparisons
tukeytest <- TukeyHSD(plant.av)
tukeytest
layout(matrix(1,nrow=1,byrow = T))
plot(tukeytest)   #default plotting method for tukey test objects!
######
# alternative method
# run tukey test
emm <- emmeans(plant.lm,specs=c("group"))  # compute the treatment means with 'emmeans'
pairs(emm)    # run tukey test!
toplot <- as.data.frame(summary(emm))[,c("group","emmean","lower.CL","upper.CL")]
xvals <- barplot(toplot$emmean,names.arg = toplot$group,ylim=c(0,7))
arrows(xvals,toplot$lower.CL,xvals,toplot$upper.CL,angle=90,code=3)
text(xvals,c(6.4,6.4,6.4),labels = c("ab","a","b"),cex=1.5)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
######
# add confidence interval on the regression line
newdata <- data.frame(
light = seq(20,80,1)
)
my.predict <- predict(model, newdata = newdata, interval = "confidence")
lines(newdata$light,my.predict[,"upr"],col="red",lty=2)   # add upper bound
######
# add confidence interval on the regression line
newdata <- data.frame(
light = seq(20,80,1)
)
my.predict <- predict(model, newdata = newdata, interval = "confidence")
plot(hatchlings.successful~light)  # plot the data
abline(intercept,slope,col="blue")
lines(newdata$light,my.predict[,"upr"],col="red",lty=2)   # add upper bound
lines(newdata$light,my.predict[,"lwr"],col="red",lty=2)   # add lower bound
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(agricolae)
data("PlantGrowth")
head(PlantGrowth)
data("ToothGrowth")
head(ToothGrowth)
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
?interaction.plot
ordered(dose)
ToothGrowth$dose <- ordered(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
ToothGrowth$dose
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
ToothGrowth$dose
table(ToothGrowth$dose)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
summary(model_with_interaction)
data("ToothGrowth")
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)   # three doses, two types of supplements
ToothGrowth$dose <- as.factor(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
summary(model_with_interaction)
data("ToothGrowth")
summary(ToothGrowth)
table(ToothGrowth$supp,ToothGrowth$dose)   # three doses, two types of supplements
ToothGrowth$dose <- ordered(ToothGrowth$dose)  # convert dose variable to factor (make it categorical)
model <- lm(len~supp+dose,data=ToothGrowth)  # two way anova with no interaction
summary(model)
model_with_interaction <- lm(len~supp*dose,data=ToothGrowth)  # now try again with interactions
summary(model_with_interaction)
with(ToothGrowth, {   # the "with" function allows you to only specify the name of the data frame once, and then refer to the columns of the data frame as if they were variables in your main environment
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, leg.bty = "o")
interaction.plot(dose, supp, len, fixed = TRUE, col = 2:3, type = "p")
})
interaction.plot(dose, supp, len, fixed = TRUE, col = c("red","blue"), leg.bty = "o")
with(ToothGrowth, {   # the "with" function allows you to only specify the name of the data frame once, and then refer to the columns of the data frame as if they were variables in your main environment
interaction.plot(dose, supp, len, fixed = TRUE, col = c("red","blue"), leg.bty = "o")
})
anova(model)
anova(model_with_interaction)
TukeyHSD(model, "dose")
TukeyHSD(anova(model), "dose")
TukeyHSD(aov(model), "dose")
?emmeans
TukeyHSD(aov(model_with_interaction), "dose")   # run tukey test for the 'dose' variable in the ToothGrowth model
?TukeyHSD
leastsquare = lsmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
library(lsmeans)
leastsquare = lsmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
cld(leastsquare,
alpha=.05,
Letters=letters)
library(multcompView)
cld(leastsquare,
alpha=.05,
Letters=letters)
leastsquare
library(multcomp)
cld(leastsquare,
alpha=.05,
Letters=letters)
?emmeans
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
library(emmeans)
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
CLD(leastsquare,
alpha=.05,
Letters=letters)
?cld.emmGrid
pwpm(leastsquare)
pwpm(emm)
emm = emmeans(model_with_interaction,
pairwise ~ dose:supp,
adjust="tukey")
emm
class(emm)
pwpm(pairs(emm))
emm = emmeans(model_with_interaction,
specs= pairwise ~ dose:supp)
pwpm(emm)
library(emmeans)
emm = emmeans(model_with_interaction,
specs= pairwise ~ dose:supp)
multcomp::cld(emm)
pwpp(emm)
plot(emm)
summary(emm)
pairs(emm)
contrast(emm)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("INTRO.Rmd")
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE2.Rmd")
rmd2rscript("LECTURE3.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
