GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)
abline(v=z.statistic)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
## Z test  (Ben Sullivan example)
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
n <- length(GSWheight)
s.e. <- sd.pop/sqrt(n)
null.height <- 79
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)
abline(v=z.statistic,col="green",lwd=3)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
pnorm(z.statistic)
n
pnorm(z.statistic)
p
pnorm(z.statistic)
p
rt(10,df)
?rt
df = 6
rt(10,df)
#########
# t distribution
df = 6
rt(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dt(x,df),-4,4)   # probability density
curve(pt(x,df),-4,4)   # cumulative distribution
integrate(f=dt,lower=-Inf,upper=Inf,df=df)    # just to make sure it integrates to 1!!
#########
# Chi-squared distribution
df = 6
rchisq(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dchisq(x,df),0,15)   # probability density
curve(pchisq(x,df),0,15)   # cumulative distribution
integrate(f=dchisq,lower=0,upper=Inf,df=df)    # just to make sure it integrates to 1!!
?knitr::kable
knitr::kable(courseSchedule,caption="")
rmarkdown::render('index.Rmd', 'word_document')
rmarkdown::render('schedule.Rmd', 'word_document')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
hist(rbinom(10000,1,.5),xlab="N heads out of 1")
par(mfrow=c(4,3))
for(i in 2:12){
hist(rbinom(10000,i,.5),main=paste0("sample size = ",i),xlab=sprintf("N heads out of %s",i))
}
hist(rbinom(10000,100,.5),xlab="N heads out of 1")
hist(rbinom(10000,1000,.5),xlab="N heads out of 1")
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
sample(mysample)
sample(mysample,replace = T)
sample(mysample,replace = T)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
sd <- sd(sample(mysample,replace = T))  # account for uncertainty in sample standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd)
}
sampling.distribution <- sapply(simulated.samples,mean)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
sd <- sd(sample(mysample,replace = T))  # account for uncertainty in sample standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
sd <- sd(sample(mysample,replace = T))  # account for uncertainty in sample standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:1000){
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
sample(mysample-sample.mean,replace = T)
sd(sample(mysample-sample.mean,replace = T))
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sd(sample(mysample-sample.mean,replace = T))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sd(sample(mysample-sample.mean,replace = T))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sample.stdev
sample.stdev
sample.stdev
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T)-sample.mean)
sd(sample(mysample,replace = T))
sd(sample(mysample,replace = T))
sd(sample(mysample,replace = T))
sd(sample(mysample,replace = T))
sample(mysample,replace = T)
sample(mysample,replace = T)-sample.mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
sample(mysample,replace = T)
sample(mysample,replace = T)-sample.mean
sd1 <- ((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1)
((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1)
sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1)
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sample.stdev
sample.stdev
sample.stdev
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-1))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution,2),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
plot(density(sampling.distribution,1),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution,1),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
?sample
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample),replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = F)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample),replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
hist(mysample)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
hist(mysample)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sample.stdev)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
164636+61192+269992
