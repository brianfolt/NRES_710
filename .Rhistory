rmd2rscript(infile = "./materials_/lecture_10.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_11.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_12.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_13.Rmd", outdir = "datasets/")
#rmd2rscript(infile = "./materials_/lecture_14.Rmd", outdir = "datasets/") # no rmd script for lecture 14
rmd2rscript(infile = "./materials_/lecture_15.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_16.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_17.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_18.Rmd", outdir = "datasets/")
rmd2rscript(infile = "./materials_/lecture_19.Rmd", outdir = "datasets/")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
### Dataset 1
# Simulate study design with four sites; each site has four plots; each plot receives one of four treatments; each plot has four different samples.
set.seed(123) # Reproducibility
# Plots
n_sites <- 4
n_plots <- 4
n_samples <- 4
Site <- sort(rep(rep(1:n_sites, n_plots*n_samples)))
Site
Heat <- rep(sort(rep(c(0, 1), n_plots*n_samples)), n_sites)
Heat
Heat <- rep(sort(rep(c(0, 1), n_samples)), n_sites*n_plots)
Heat
Heat <- rep(sort(rep(c(1, 0), n_samples)), n_sites*n_plots)
Heat
Heat <- rep(sort(rep(c(1, 0), n_samples)), n_sites*n_plots)
Heat
# Heat
Heat <- rep(sort(rep(c(0, 1), n_samples)), n_sites*n_plots)
Heat
Elevation <- rep(sort(rep(c(1, 0), n_samples)), n_sites*n_plots)
Elevation
Heat <- rep(rep(c(0, 1), n_samples), n_sites*n_plots)
Heat
rep(0, n_samples)
c(rep(0, n_samples), rep(1, n_samples))
rep(c(rep(0, n_samples), rep(1, n_samples)), 2)
rep(rep(c(rep(0, n_samples), rep(1, n_samples)), 2), n_sites)
Elevation <- rep(rep(c(rep(1, n_samples), rep(0, n_samples)), 2), n_sites)
Elevation
Heat <- rep(c(rep(0, n_samples), rep(1, n_samples), rep(0, n_samples), rep(1, n_samples)), n_sites)
Heat
# Heat
Heat <- rep(c(rep(0, n_samples), rep(1, n_samples), rep(0, n_samples), rep(1, n_samples)), n_sites)
# Elevation
Elevation <- rep(c(rep(0, n_samples), rep(0, n_samples), rep(1, n_samples), rep(1, n_samples)), n_sites)
Heat
Elevation
Treatment <- c(rep("HLEL", 4), rep("HHEL", 4), rep("HLEH", 4), rep("HHEH", 4))
Treatment
Treatment <- rep(c(rep("HLEL", 4), rep("HHEL", 4), rep("HLEH", 4), rep("HHEH", 4)), n_sites)
Treatment
Treatment <- as.factor(rep(c(rep("HLEL", 4), rep("HHEL", 4), rep("HLEH", 4), rep("HHEH", 4)), n_sites))
Treatment
Treatment <- as.factor(rep(c(rep("HLEL", 4), rep("HHEL", 4), rep("HLEH", 4), rep("HHEH", 4)), n_sites), levels = c("HLEL", "HHEL", "HLEH", "HHEH"))
Treatment <- as.factor(rep(c(rep("HLEL", 4), rep("HHEL", 4), rep("HLEH", 4), rep("HHEH", 4)), n_sites), order = c("HLEL", "HHEL", "HLEH", "HHEH"))
Treatment <- as.factor(rep(c("HLEL", "HHEL", "HLEH", "HHEH"), each = 4, times = n_sites))
Treatment
Treatment <- factor(rep(c("HLEL", "HHEL", "HLEH", "HHEH"), each = 4, times = n_sites),
levels = c("HLEL", "HHEL", "HLEH", "HHEH"))
Treatment
# Create a data frame using expand.grid for combinations
df <- expand.grid(
Site = 1:n_sites,
Plot = 1:(n_samples),
Heat = c(0, 1),
Elevation = c(0, 1)
)
df
Treatment
Plot <- sort(rep(1:4, n_samples))
Plot
Plot <- rep(sort(rep(1:4, n_samples)), n_sites)
Plot
Sample <- rep(rep(1:4, n_samples), n_sites)
Sample
SiteError <- rep(rnorm(n_sites, 0, 1), each = n_site * n_plots * n_samples)
---
title: "Exercise 7: Nested Design Models"
SiteError <- rep(rnorm(n_sites, 0, 1), each = n_sites * n_plots * n_samples)
SiteError
SiteError <- rep(rnorm(n_sites, 0, 1), each =  n_plots * n_samples)
SiteError
SiteError <- rep(rnorm(n_sites, 0, 4), each =  n_plots * n_samples)
PlotError <- rep(rnorm(n_plots * n_sites, 0, 2), each = n_samples)
PlotError
Plot
Error <- rnorm(length(Plot), 0, 1)
Error
### Dataset 1
# Simulate study design with four sites; each site has four plots; each plot receives one of four treatments; each plot has four different samples.
set.seed(123) # Reproducibility
## Set up study design
# Plots
n_sites <- 4
n_plots <- 4
n_samples <- 4
# Site
Site <- sort(rep(rep(1:n_sites, n_plots*n_samples)))
# Heat
Heat <- rep(c(rep(0, n_samples), rep(1, n_samples), rep(0, n_samples), rep(1, n_samples)), n_sites)
# Elevation
Elevation <- rep(c(rep(0, n_samples), rep(0, n_samples), rep(1, n_samples), rep(1, n_samples)), n_sites)
# Treatment
Treatment <- factor(rep(c("HLEL", "HHEL", "HLEH", "HHEH"), each = 4, times = n_sites),
levels = c("HLEL", "HHEL", "HLEH", "HHEH"))
# Plot
Plot <- rep(sort(rep(1:4, n_samples)), n_sites)
# Sample
Sample <- rep(rep(1:4, n_samples), n_sites)
## Simulate error
# Site error
SiteError <- rep(rnorm(n_sites, 0, 4), each =  n_plots * n_samples)
# Plot error
PlotError <- rep(rnorm(n_plots * n_sites, 0, 2), each = n_samples)
# Residual error (i.e., sample error)
ResidualError <- rnorm(length(Plot), 0, 1)
# Response variable -- tree stems per sample
Biomass <- 50 + 5*Heat + 10*Elevation + 15*Heat*Elevation + SiteError + PlotError + ResidualError
set.seed(123) # Reproducibility
## Set up study design
# Plots
n_sites <- 4
n_plots <- 4
n_samples <- 4
# Site
Site <- sort(rep(rep(1:n_sites, n_plots*n_samples)))
# Heat
Heat <- rep(c(rep(0, n_samples), rep(1, n_samples), rep(0, n_samples), rep(1, n_samples)), n_sites)
# Elevation
Elevation <- rep(c(rep(0, n_samples), rep(0, n_samples), rep(1, n_samples), rep(1, n_samples)), n_sites)
# Treatment
Treatment <- factor(rep(c("HLEL", "HHEL", "HLEH", "HHEH"), each = 4, times = n_sites),
levels = c("HLEL", "HHEL", "HLEH", "HHEH"))
# Plot
Plot <- rep(sort(rep(1:4, n_samples)), n_sites)
# Sample
Sample <- rep(rep(1:4, n_samples), n_sites)
## Simulate error
# Site error
SiteError <- rep(rnorm(n_sites, 0, 4), each =  n_plots * n_samples)
# Plot error
PlotError <- rep(rnorm(n_plots * n_sites, 0, 2), each = n_samples)
# Residual error (i.e., sample error)
ResidualError <- rnorm(length(Plot), 0, 1)
# Response variable -- tree stems per sample
StemDensity <- 50 + 5*Heat + 10*Elevation + 15*Heat*Elevation + SiteError + PlotError + ResidualError
# Save the data
datum <- data.frame(Site = Site, Heat = Heat, Elevation = Elevation, Treatment = Treatment, Plot = Plot, Sample = Sample, SiteError = SiteError, PlotError = PlotError, ResidualError = ResidualError, StemDensity = StemDensity)
# Save the CSV file
write.csv(datum, "exercise_7_dataset1.csv", row.names = FALSE)
set.seed(123) # Reproducibility
## Set up study design
# Plots
n_sites <- 4
n_plots <- 4
n_samples <- 4
# Site
Site <- sort(rep(rep(1:n_sites, n_plots*n_samples)))
# Heat
Heat <- rep(c(rep(0, n_samples), rep(1, n_samples), rep(0, n_samples), rep(1, n_samples)), n_sites)
# Elevation
Elevation <- rep(c(rep(0, n_samples), rep(0, n_samples), rep(1, n_samples), rep(1, n_samples)), n_sites)
# Treatment
Treatment <- factor(rep(c("HLEL", "HHEL", "HLEH", "HHEH"), each = 4, times = n_sites),
levels = c("HLEL", "HHEL", "HLEH", "HHEH"))
# Plot
Plot <- rep(sort(rep(1:4, n_samples)), n_sites)
# Sample
Sample <- rep(rep(1:4, n_samples), n_sites)
## Simulate error
# Site error
SiteError <- rep(rnorm(n_sites, 0, 4), each =  n_plots * n_samples)
# Plot error
PlotError <- rep(rnorm(n_plots * n_sites, 0, 2), each = n_samples)
# Residual error (i.e., sample error)
ResidualError <- rnorm(length(Plot), 0, 1)
# Response variable -- tree stems per sample
StemDensity <- 50 + 2*Heat + 3*Elevation + 6*Heat*Elevation + SiteError + PlotError + ResidualError
# Save the data
datum <- data.frame(Site = Site, Heat = Heat, Elevation = Elevation, Treatment = Treatment, Plot = Plot, Sample = Sample, SiteError = SiteError, PlotError = PlotError, ResidualError = ResidualError, StemDensity = StemDensity)
# Save the CSV file
write.csv(datum, "exercise_7_dataset1.csv", row.names = FALSE)
set.seed(123) # Reproducibility
## Set up study design
# Plots
n_plots <- 10
# Month
Elevation <- c(rep("January", n_plots), rep("April", n_plots), rep("July", n_plots), rep("October", n_plots))
Month <- c(rep("January", n_plots), rep("April", n_plots), rep("July", n_plots), rep("October", n_plots))
Month
rep("Food+", each = n_plots/2)
Treatment <- factor(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)
levels = c("Control", "Food+"))
Treatment <- factor(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)
levels = c("Control", "Food+")
# Treatment
Treatment <- factor(c(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)), levels = c("Control", "Food+")
Treatment <- factor(c(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)), levels = c("Control", "Food+"))
Treatment
Month
n_months <- 4
# Treatment
Treatment <- factor(rep(c(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)), n_months), levels = c("Control", "Food+"))
Treatment
Month
# Month
Month <- factor(c(rep("January", n_plots), rep("April", n_plots), rep("July", n_plots), rep("October", n_plots)), levels = c("January", "April", "July", "October"))
Month
Plot <- rep(rep(1:n_plots), n_months)
Plot
PlotError <- rep(rnorm(n_plots, 0, 2), each = n_plots * n_months)
PlotError
## Set up study design
# Plots
n_plots <- 10
n_months <- 4
# Month
Month <- factor(c(rep("January", n_plots), rep("April", n_plots), rep("July", n_plots), rep("October", n_plots)), levels = c("January", "April", "July", "October"))
# Treatment
Treatment <- factor(rep(c(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)), n_months), levels = c("Control", "Food+"))
# Plot
Plot <- rep(rep(1:n_plots), n_months)
Plot
Month
Plot <- sort(rep(rep(1:n_plots), n_months))
Plot
# Plot
Plot <- rep(rep(1:n_plots), n_months)
## Simulate error
# Plot error
PlotError <- rep(rnorm(n_plots, 0, 2), each = n_months)
PlotError
rnorm(n_plots, 0, 2)
PlotError <- rep(rnorm(n_plots, 0, 2), n_months)
PlotError
ResidualError <- rnorm(length(Plot), 0, 1)
ResidualError
PlotError <- rep(rnorm(n_plots, 0, 10), n_months)
PlotError
ResidualError <- rnorm(length(Plot), 0, 3)
# Dummy-code the Month
dummy <- data.frame(model.matrix(~ Month - 1))
dummy
dummy
colnames(dummy) <- c("January", "April", "July", "October")
dummy
dummy
Plot
Month
Plot
Month
Month
rep(c("January", "April", "July", "October"), n_plots)
Month <- factor(c(rep(c("January", "April", "July", "October"), n_plots), levels = c("January", "April", "July", "October"))
Month <- factor(rep(c("January", "April", "July", "October"), n_plots), levels = c("January", "April", "July", "October"))
Month
# Dummy-code the Month
dummy <- data.frame(model.matrix(~ Month - 1))
colnames(dummy) <- c("January", "April", "July", "October")
dummy
dummy
# Treatment
Treatment <- factor(rep(c(rep("Food+", each = n_plots/2), rep("Control", each = n_plots/2)), n_months), levels = c("Control", "Food+"))
Treatment
Treatment <- factor(sort(rep(c("Control", "Food+"), each = (n_plots/2) * n_months)), levels = c("Control", "Food+")
Treatment
Treatment
sort(rep(c("Control", "Food+"), each = (n_plots/2) * n_months))
# Treatment
Treatment <- factor(sort(rep(c("Control", "Food+"), each = (n_plots/2) * n_months)), levels = c("Control", "Food+")
Treatment <- factor(sort(rep(c("Control", "Food+"), each = (n_plots/2) * n_months)), levels = c("Control", "Food+"))
Treatment
# Plot
Plot <- rep(rep(1:n_plots), n_months)
Plot
Plot <- sort(rep(rep(1:n_plots), n_months))
Plot
PlotError <- rep(rnorm(n_plots, 0, 10), n_months)
PlotError
PlotError <- rep(rnorm(n_months, 0, 10), n_plot)
PlotError <- rep(rnorm(n_months, 0, 10), n_plots)
PlotError
PlotError <- rep(rep(rnorm(1, 0, 10), n_plots), n_months)
PlotError
PlotError <- rep(rnorm(1, 0, 10), n_plots))
## Simulate error
# Plot error
PlotError <- rep(rnorm(1, 0, 10), n_plots)
PlotError
Plot
Treatment
dummy
# Month
Month <- factor(rep(c("January", "April", "July", "October"), n_plots), levels = c("January", "April", "July", "October"))
# Dummy-code the Month
dummy <- data.frame(model.matrix(~ Month - 1))
colnames(dummy) <- c("January", "April", "July", "October")
dummy
dummy
Month
PlotError <- rep(rnorm(n_plots, 0, 3.5), each = n_months)
PlotError
length(Plot)
ResidualError <- rnorm(length(Plot), 0, 3)
Treatment
Treated <- data.frame(model.matrix(~ Treatment - 1))
Treated
Treated
colnames(Treated) <- c("Control", "Treated")
Treated
set.seed(123) # Reproducibility
## Set up study design
# Plots
n_plots <- 10
n_months <- 4
# Month
Month <- factor(rep(c("January", "April", "July", "October"), n_plots), levels = c("January", "April", "July", "October"))
# Dummy-code the Month
dummy <- data.frame(model.matrix(~ Month - 1))
colnames(dummy) <- c("January", "April", "July", "October")
# Treatment
Treatment <- factor(sort(rep(c("Control", "Food+"), each = (n_plots/2) * n_months)), levels = c("Control", "Food+"))
Treated <- data.frame(model.matrix(~ Treatment - 1))
colnames(Treated) <- c("Control", "Treated")
# Plot
Plot <- sort(rep(rep(1:n_plots), n_months))
## Simulate error
# Plot error
PlotError <- rep(rnorm(n_plots, 0, 3.5), each = n_months)
# Residual error (i.e., sample error)
ResidualError <- rnorm(length(Plot), 0, 3)
# Response variable -- lizards per plot in each month
LizardAbundance <- 25 + 0*Treated$Treated + 8*dummy$April + 4*dummy$July - 1*dummy$October + 5*Treated$Treated*dummy$April + 2*Treated$Treated*dummy$July + 0*Treated$Treated*dummy$October + PlotError + ResidualError
# Save the data
datum <- data.frame(Plot = Plot, Month = Month, Jan = dummy$January, Apr = dummy$April, Jul = dummy$July, Oct = dummy$Oct, Treatment = Treatment, Treated = Treated$Treated, PlotError = PlotError, ResidualError = ResidualError, Lizards = LizardAbundance)
# Save the CSV file
write.csv(datum, "exercise_7_dataset2.csv", row.names = FALSE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
# Simulate the x-data
n_snakes <- 45
age <- runif(n_snakes, 3, 10)
age
age <- round(runif(n_snakes, 3, 10), 1)
age
wild <- rbinom(n_snakes, 0.6)
wild <- rbinom(n_snakes, prob = 0.6)
wild <- rbinom(size = n_snakes, prob = 0.6)
?rbinom()
wild <- rbinom(size = n_snakes, n = 1, prob = 0.6)
wild
wild <- rbinom(size = 1, n = n_snakes, prob = 0.6)
wild
### Dataset 1
# Simulate split-plot design data w/ three fixed effects: bison, fertilizer, water split across 6 fields
set.seed(123)
# Simulate the x-data
n_snakes <- 45
age <- round(runif(n_snakes, 3, 10), 1)
wild <- rbinom(size = 1, n = n_snakes, prob = 0.6) # 1 = born in wild; 0 = born in captivity
mean_clutch <- exp(0 + 0.1*age + 1.5*wild)
mean_clutch
?rpois()
clutch_size <- rpois(1, mean_clutch) # y_i
clutch_size
clutch_size
mean_clutch
clutch_size <- rep(NA, n_snakes)
clutch_size
for (i in 1:n_snakes){
clutch_size[i] <- rpois(1, mean_clutch[i])
# y_i - simulate each observation of y_i using the y_hat mean for each snake
}
clutch_size
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
write.csv(datum, "lecture_GLM_dataset1.csv", row.names = FALSE)
write.csv(datum, "../datasets/lecture_GLM_dataset1.csv", row.names = FALSE)
hist(clutch_size)
set.seed(123)
# Sample size
n_snakes <- 45 # Sample size
# X1 data - age
age <- round(runif(n_snakes, 3, 10), 1) # Age - uniformly distributed between 3 and 10 years old
# X2 data - clutch laid in wild or captivity
wild <- rbinom(size = 1, n = n_snakes, prob = 0.6) # 1 = laid in wild; 0 = laid in captivity
# Response variable
mean_clutch <- exp(1 + 0.1*age + 1.5*wild) # y_hat; the mean clutch size for each snake, given effects
clutch_size <- rep(NA, n_snakes)
# Response variable
for (i in 1:n_snakes){
clutch_size[i] <- rpois(1, mean_clutch[i])
# y_i - simulated each observation of y_i using a random process but given the y_hat mean for each individual snake
}
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
write.csv(datum, "lecture_GLM_dataset1.csv", row.names = FALSE)
write.csv(datum, "../datasets/lecture_GLM_dataset1.csv", row.names = FALSE)
hist(clutch_size)
set.seed(123)
# Sample size
n_snakes <- 45 # Sample size
# X1 data - age
age <- round(runif(n_snakes, 3, 10), 0) # Age - uniformly distributed between 3 and 10 years old
# X2 data - clutch laid in wild or captivity
wild <- rbinom(size = 1, n = n_snakes, prob = 0.6) # 1 = laid in wild; 0 = laid in captivity
# Response variable
mean_clutch <- exp(1 + 0.1*age + 1.5*wild) # y_hat; the mean clutch size for each snake, given effects
clutch_size <- rep(NA, n_snakes)
# Response variable
for (i in 1:n_snakes){
clutch_size[i] <- rpois(1, mean_clutch[i])
# y_i - simulated each observation of y_i using a random process but given the y_hat mean for each individual snake
}
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
write.csv(datum, "lecture_GLM_dataset1.csv", row.names = FALSE)
write.csv(datum, "../datasets/lecture_GLM_dataset1.csv", row.names = FALSE)
hist(clutch_size)
clutch_size
set.seed(123)
# Sample size
n_snakes <- 45 # Sample size
# X1 data - age
age <- round(runif(n_snakes, 3, 10), 0) # Age - uniformly distributed between 3 and 10 years old
# X2 data - clutch laid in wild or captivity
wild <- rbinom(size = 1, n = n_snakes, prob = 0.6) # 1 = laid in wild; 0 = laid in captivity
# Response variable
mean_clutch <- exp(0 + 0.1*age + 1.5*wild) # y_hat; the mean clutch size for each snake, given effects
clutch_size <- rep(NA, n_snakes)
# Response variable
for (i in 1:n_snakes){
clutch_size[i] <- rpois(1, mean_clutch[i])
# y_i - simulated each observation of y_i using a random process but given the y_hat mean for each individual snake
}
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
write.csv(datum, "lecture_GLM_dataset1.csv", row.names = FALSE)
write.csv(datum, "../datasets/lecture_GLM_dataset1.csv", row.names = FALSE)
hist(clutch_size)
# Load the data
datum <- read.csv("lecture_GLM_dataset1.csv")
head(datum, 20)
head(datum, 20)
# Plot it
plot(ClutchSize ~ Age, data = datum)
plot(ClutchSize ~ Age, data = datum)
# Plot it
plot(ClutchSize ~ Age, data = datum, pch = as.numeric(datum$Wild))
plot(ClutchSize ~ Age, data = datum, pch = as.numeric(datum$Wild))
datum
set.seed(123)
# Sample size
n_snakes <- 45 # Sample size
# X1 data - age
age <- round(runif(n_snakes, 3, 10), 0) # Age - uniformly distributed between 3 and 10 years old
# X2 data - clutch laid in wild or captivity
wild <- rbinom(size = 1, n = n_snakes, prob = 0.5) # 1 = laid in wild; 0 = laid in captivity
# Response variable
mean_clutch <- exp(0 + 0.1*age + 1.5*wild) # y_hat; the mean clutch size for each snake, given effects
clutch_size <- rep(NA, n_snakes)
# Response variable
for (i in 1:n_snakes){
clutch_size[i] <- rpois(1, mean_clutch[i])
# y_i - simulated each observation of y_i using a random process but given the y_hat mean for each individual snake
}
# Save the data
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)
# Save the data
write.csv(datum, "lecture_GLM_dataset1.csv", row.names = FALSE)
write.csv(datum, "../datasets/lecture_GLM_dataset1.csv", row.names = FALSE)
datum <- data.frame(Age = age, Wild = wild, MeanClutchSize = mean_clutch, ClutchSize = clutch_size)datum <- read.csv("lecture_GLM_dataset1.csv")
plot(ClutchSize ~ Age, data = datum, pch = as.numeric(datum$Wild))
# Examine the 'glm()' function
help(glm)
# Yes, I forgot to specify the 'family' statement to use a Poisson distribution!
# Re-run it correctly while specifying the 'family' statement
results2 <- glm(ClutchSize ~ Age + Wild, data = datum, family = "poisson")
summary(results2)
e^1.52
exp(1.52)
confint(results2)
exp(1.21)
exp(1.84)
exp(0.07)
exp(-0.002731)
exp(0.1446)
1.07 * 1.07 * 1.07 * 1.07 * 1.07 * 1.07
rmd2rscript(infile = "./materials_/lecture_GLMs.Rmd", outdir = "datasets/")
#rmd2rscript(infile = "./materials_/lecture_20.Rmd", outdir = "datasets/") # no r code
#rmd2rscript(infile = "./materials_/lecture_21.Rmd", outdir = "datasets/") # no r code
rmd2rscript(infile = "./materials_/lecture_GLM.Rmd", outdir = "datasets/")
rmarkdown::render('materials_/lecture_GLM.Rmd', 'word_document')
rmarkdown::render('materials_/lecture_21.Rmd', 'word_document')
0.6^5
