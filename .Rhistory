Group.1     51
Group.1     52
Group.1     53
Group.1    342
Group.2     10
Group.2     11
Group.2     12
Group.2     13
Group.2     14
Group.2     15
Group.2     16
Group.2     17
Group.2     18
Group.2     37
Group.2     58
Group.2     59
Group.2     60
Group.2     61
Group.2     62
Group.2     63
Group.2     64
Group.2    193
Group.3     19
Group.3     20
Group.3     21
Group.3     22
Group.3     23
Group.3     24
Group.3     25
Group.3     26
Group.3     27
Group.3     28
Group.3     65
Group.3     66
Group.3     67
Group.3     68
Group.3     69
Group.3     70
Group.3     71
Group.3     72
")
Data = read.table(textConnection(Input),header=TRUE)
Data$Group = factor(Data$Group,levels=unique(Data$Group))    # transform predictor variable to factor
#summarize values by group
groups <- unique(Data$Group)
ngroups <- length(groups)
sumry <- sapply(1:ngroups,function(i){temp <- subset(Data,Group==groups[i]); summary(temp$Value)}  )
colnames(sumry) <- groups
sumry
# histograms by group
library(ggplot2)
ggplot(Data, aes(x=Value)) +
geom_histogram(bins=10,aes(color=Group)) +
facet_grid(~Group)
# ## first install required packages if needed
#
# if(!require(dplyr)){install.packages("dplyr")}
# if(!require(FSA)){install.packages("FSA")}
# if(!require(DescTools)){install.packages("DescTools")}
# if(!require(multcompView)){install.packages("multcompView")}
ggplot(Data, aes(x=Value)) +
geom_histogram(bins=10,aes(color=Group,fill=Group)) +
facet_grid(~Group)
model <- lm(Value~Group,data=Data)
aov(model)
anova(model)
anova(model)   # looks a little weird
layout(matrix(1:4,nrow=2,byrow=T))
plot(model)
model <- lm(Value~Group,data=Data)
anova(model)   # looks a little weird
layout(matrix(1:4,nrow=2,byrow=T))
plot(model)
shapiro.test(residuals(model))
summary(moderl)
summary(model)
kruskal.test(Value ~ Group, data = Data)
library(FSA)  # make sure you have this package installed!
library(FSA)  # make sure you have this package installed!
?dunnTest
dt = dunnTest(Value ~ Group,data=Data,method="bh")
dt
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
predictor <- runif(100,0,50)
plogis(-30 + 0.01*predictor)
-30 + 0.01*predictor
plogis(-3 + 0.01*predictor)
plogis(-1.1 + 0.01*predictor)
-1.1 + 0.01*predictor
plogis(-1.1 + 0.06*predictor)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-1.1 + 0.06*predictor) )
plot(predictor~response)
plot(response~predictor)
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-1.1 + 0.06*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")
plogis(-2 + 0.26*predictor)
plogis(-5 + 0.26*predictor)
-5 + 0.26*predictor
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-5 + 0.26*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")
hist(residuals(lm(response~predictor)))
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-7 + 0.46*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-7 + 0.46*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
hist(residuals(lm(response~predictor)))
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-5 + 0.26*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
hist(residuals(lm(response~predictor)))
qqnorm(residuals(lm(response~predictor)))
layout(matrix(1:4,nrow=2,byrow=2))
## made up data for glm #1 (logistic regression)
predictor <- runif(100,0,50)
response <- rbinom(100,1, plogis(-5 + 0.26*predictor) )
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
layout(matrix(1:4,nrow=2,byrow=2))
plot(lm(response~predictor))
probs <- runif(10)
probs
data.frame(
p = probs,
logit.p=log(probs/(1-probs))
)
model <- glm(response~predictor,family=Binomial(link="logit"))
?binomial
model <- glm(response~predictor,family=binomial(link="logit"))
summary(model)
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
## conduct logistic regression:
model <- glm(response~predictor,family=binomial(link="logit"))    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay regression line
## conduct logistic regression:
model <- glm(response~predictor,family=binomial(link="logit"))    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay simple linear regression line
abline(model,col="blue")
?predict.glm
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T)
mypred
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
## conduct logistic regression:
model <- glm(response~predictor,family=binomial(link="logit"))    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
plot(response~predictor,ylim=c(-2,2))
abline(lm(response~predictor),col="red")   # overlay simple linear regression line
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
lines(newdat$predictor,mypred$fit,col="blue")
## conduct logistic regression:
model <- glm(response~predictor,family=binomial(link="logit"))    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(response~predictor)
lines(newdat$predictor,mypred$fit,col="blue")
## conduct logistic regression:
model <- glm(response~predictor,family=binomial(link="logit"))    # logistic regression in R
summary(model)   # summary looks similar to ordinary linear regression!
newdat <- data.frame(        # make predictions for plotting regression line and approx conf bounds
predictor = seq(0,50,1)
)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(response~predictor)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
mypred
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfrow(c(2,1))
par(mfrow=c(2,1))
par(mfcol=c(2,1))
par(mfcol=c(2,1))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean responseW",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean responseW",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
par(mfcol=c(1,2))
mypred <- predict(model,type="link",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response(logit scale)",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
mypred <- predict(model,type="response",se.fit=T,newdata = newdat)
plot(newdat$predictor,mypred$fit,col="blue",type="l",ylab="mean response",xlab="predictor")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,exp(3-0.4*predictor))
?rnbinom
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.4*predictor),size=2)
response
plot(response~predictor)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
abline(lm(response~predictor))
# Count regression example
predictor = runif(30,-2,2)
response = rnbinom(30,mu=exp(3-0.5*predictor),size=2)
plot(response~predictor)
abline(lm(response~predictor))
par(mfrow=c(2,2))
plot(lm(response~predictor))
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
## try Poisson count regression model!
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T)
lines(newdat$predictor,mypred$fit,col="blue",newdata=newdat)
## try Poisson count regression model!
model <- glm(response~predictor,family=poisson(link="log"))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
residuals(model)
residuals(model,type="deviance")
summary(residuals(model))
paste0(c("Null deviance: ", "Residual deviance: "),
round(c(model$null.deviance, deviance(model)), 2))
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
deviance(model)
residuals(model)  # compute the deviance residuals for the poisson regression model
summary(residuals(model))   # median should be near zero
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
paste0(c("Null deviance: ", "Residual deviance: "),     # null deviance should be much higher than residual deviance
round(c(model$null.deviance, deviance(model)), 2))
model$df.residual
paste0(c("model df: ", "Residual deviance: "),     # resid deviance should be close to residual df
round(c(model$df.residual, deviance(model)), 2))
library(DHARMa)
simresids <- simulateResiduals(model,n=250,plot=T)
plotResiduals(simresids,predictor)
testResiduals(simresids)
?glm
library(MASS)
model <- glm(response~predictor,family=negbin(link="log"))
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
## try NegBinom count regression model!
library(MASS)
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
?negative.binomial
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
## try NegBinom count regression model!
library(MASS)
## NOTE: in reality you should use glm.nb because you don't know the additional parameter theta!
model <- glm(response~predictor,family=negative.binomial(link="log",theta = 2))
summary(model)
model <- glm.nb(response~predictor)
plot(response~predictor)
newdat <- data.frame(
predictor = seq(-3,3,0.1)
)
mypred <- predict(model,type="response",se.fit = T,newdata=newdat)
lines(newdat$predictor,mypred$fit,col="blue")
lines(newdat$predictor,mypred$fit+2*mypred$se.fit,col="blue",lty=2)
lines(newdat$predictor,mypred$fit-2*mypred$se.fit,col="blue",lty=2)
simresids <- simulateResiduals(model,n=250,plot=T)   # clearly this is a bad fit!
plotResiduals(simresids,predictor)   # look for patterns across a predictor variable
simresids <- simulateResiduals(model,n=250,plot=T)   # clearly this is a bad fit!
testResiduals(simresids)  # run tests on the residuals!
library(AICcmodavg)
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
predictor3 <- rnorm(30)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
library(AICcmodavg)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
library(AICcmodavg)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
aictab(cand.set)
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,LogLik),
AIC = sapply(cand.set,AIC)
)
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,logLik),
AIC = sapply(cand.set,AIC)
)
AICtab
AICtab$DeltaAIC <- abs(AICtab$AIC-min(AICtab$AIC))
AICtab$DeltaAIC
AICtab[order(AICtab$DeltaAIC,decreasing = F),]
######
# Make up data!
predictor1 = runif(30,-2,2)
predictor2 <- runif(30,-100,100)
predictor3 <- rnorm(30)   # useless predictor
response = rnbinom(30,mu=exp(3-0.5*predictor1+0.01*predictor2),size=2)
###
# fit a bunch of candidate models
model.pois.all <- glm(response~predictor1+predictor2+predictor3,family="poisson")
model.nb.all <- glm.nb(response~predictor1+predictor2+predictor3)
model.nb.1 <- glm.nb(response~predictor1)
model.nb.12 <- glm.nb(response~predictor1+predictor2)
model.nb.2 <- glm.nb(response~predictor2)
cand.set <- list(
Poisson=model.pois.all,
NegBin_allvars = model.nb.all,
NegBin_pred1 = model.nb.2,
NegBin_preds1and2 = model.nb.12,
NegBin_pred2 = model.nb.2
)
### Make AIC table
AICtab <- data.frame(
ModelName = names(cand.set),
LogLikelihood = sapply(cand.set,logLik),
AIC = sapply(cand.set,AIC)
)
AICtab$DeltaAIC <- abs(AICtab$AIC-min(AICtab$AIC))
AICtab[order(AICtab$DeltaAIC,decreasing = F),]
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE4.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE5.Rmd")
rmd2rscript("LECTURE6.Rmd")
rmd2rscript("LECTURE7.Rmd")  ##
