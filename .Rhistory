thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- mean(thissamp)
means.ind[scenario] <- mean(thissamp.ind)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
length(which(ttest<0.05))/1000
length(which(ttest.ind<0.05))/1000
#######
# Sampling distribution: the sample mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
std.error <- sample.stdev/sqrt(n)
std.error
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))  # account for unknown standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
## Paired t-test example:
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
p=pt(t.statistic,sample.size-1)
p    # this is the p value
####### Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
p    # this is the p value
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
rmarkdown::render('LECTURE1.Rmd',rmarkdown::pdf_document())
rmd2rscript("LECTURE1.Rmd")
rmd2rscript <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
qt
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
t.crit <- qt(0.95,sample.size-1)
t.crit
sample.size-1
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
t.statistic
mean.weightloss <- mean(weightloss.data)
mean.weightloss
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic above which you reject the null!
t.crit
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic- you can reject the null if your value is more extreme than this!
t.crit
p=pt(t.statistic,sample.size-1)    # p value
p    # this is the p value
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic- you can reject the null if your value is more extreme than this!
p=pt(t.statistic,sample.size-1)    # p value
p    # this is the p value
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
curve(dnorm(x,10,4),-1,20)
curve(pnorm(x,10,4),-1,20)
curve(qnorm(x,10,4),0,1)
curve(dt(x,10),-4,4)
curve(dt(x,3),-4,4)
curve(dt(x,3),-4,40)
curve(dt(x,3),-4,4)
curve(dt(x,30),-4,4)
curve(dt(x,300),-4,4)
curve(dnorm(x),-4,4,col="red",add=T)
curve(dt(x,3),-4,4)
curve(dnorm(x),-4,4,col="red",add=T)
## Chi squared example
birthdays.bymonth <- c(40,23,33,39,28,29,45,31,22,34,44,20)
months <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
names(birthdays.bymonth) <- months
sample.size <- sum(birthdays.bymonth)
k = length(birthdays.bymonth)   # number of categories
exp.birthdays.bymonth <- sample.size*rep(1/k,times=k)
Chisq.stat <- sum((birthdays.bymonth-exp.birthdays.bymonth)^2/exp.birthdays.bymonth)
Chisq.stat
## View the summary statistic along with its sampling distribution under the null hypothesis
curve(dchisq(x,k-1),0,75)
abline(v=Chisq.stat,col="green",lwd=3)
p <- 1-pchisq(Chisq.stat,k-1)
p
### use R's built in chi squared function
chisq.test(birthdays.bymonth)     # should get the same p value!
df <- read.csv("GSW_height.csv")
df <- read.csv("GSW_height.csv")
GSWheight <- df$Height
GSWheight
mean.gsw <- mean(GSWheight)
sd.gsw <- sd(GSWheight)
sd.pop <- 4
null.height <- mean.pop
z.statistic <- (mean.gsw-null.height)/s.e.
z.statistic
curve(dnorm(x),-3,3)
p <- 1-pnorm(z.statistic)    # is the p value enough evidence to tell you that GSW players are taller than the NBA average??
p
pnorm(z.statistic)
p
##########
# Binomial
size <- 10
prob <- 0.3
rbinom(10,size,prob)
xvals <- seq(0,size,1)
probs <- dbinom(xvals,size,prob)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Binomial distribution")
barplot(cumsum(probs),ylab="Cumulative Probability",main="Binomial distribution")   # cumulative distribution
sum(probs)   # just to make sure it sums to 1!  Does it???
#########
# Gaussian
mean = 7.1
stdev = 1.9
rnorm(10,mean,stdev)
curve(dnorm(x,mean,stdev),0,15)   # probability density
curve(pnorm(x,mean,stdev),0,15)   # cumulative distribution
integrate(f=dnorm,lower=-Inf,upper=Inf,mean=mean,sd=stdev)    # just to make sure it integrates to 1!!
#########
# t distribution
df = 6
rt(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dt(x,df),-4,4)   # probability density
curve(pt(x,df),-4,4)   # cumulative distribution
integrate(f=dt,lower=-Inf,upper=Inf,df=df)    # just to make sure it integrates to 1!!
#########
# Chi-squared distribution
df = 6
rchisq(10,df)     # random numbers from the t distribution (not sure why you would ever want this!)
curve(dchisq(x,df),0,15)   # probability density
curve(pchisq(x,df),0,15)   # cumulative distribution
integrate(f=dchisq,lower=0,upper=Inf,df=df)    # just to make sure it integrates to 1!!
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
############################################################
####                                                    ####
####  NRES 710, Lecture 1                               ####
####                                                    ####
####  Kevin Shoemaker and Ben Sullivan                  ####
####  University of Nevada, Reno                        ####
####                                                    ####
############################################################
############################################################
####  Basic Concepts of Probability and statistics      ####
############################################################
#### ALL FROGS IN CA
allfrogs.bodysize <- rlnorm(10000,1.5,0.4)        # statistical 'population'
hist(allfrogs.bodysize,main="",xlab="SVL (mm)")   # plot out histogram
truemean_SVL <- mean(allfrogs.bodysize)           # the 'parameter'
truemean_SVL
mysample <- sample(allfrogs.bodysize,10)    # take sample of size 10 (10 frogs measured)
mean(mysample)   # compute the sample mean
mysample <- sample(allfrogs.bodysize,20)    # take sample of size 20 (20 frogs measured)
mean(mysample)   # compute the sample mean
lotsofsamples <- list()
for(s in 1:5000){
lotsofsamples[[paste0("sample",s)]] <- sample(allfrogs.bodysize,30)    # take sample of size 30 (20 frogs measured)
}
lotsofsamples$sample1
lotsofsamples$sample99
lotsofsamples$sample732
samplemeans <- sapply(lotsofsamples,mean)
hist(samplemeans,xlab="mean body size (n=30)")
hist(rbinom(10000,1,.5),xlab="N heads out of 1")
par(mfrow=c(3,2))
for(i in seq(2,12,2)){
hist(rbinom(10000,i,.5),main=paste0("sample size = ",i),xlab=sprintf("N heads out of %s",i))
}
hist(rbinom(10000,1000,.5),xlab="N heads out of 1")
# pseudoreplication demonstration
meansize.allfrogs <- 1.5    # population mean
sdsize.allfrogs <- 0.5     # population sd
sdsize.amongpond <- 0.44   # standard deviation among ponds
nponds <- 5000   # total number of ponds in the population
nfrogs.perpond <- 1000    # 1000 frogs in each pond
pondmeans <- rnorm(nponds,meansize.allfrogs,sdsize.amongpond)
# hist(pondmeans)
allfrogs <- sapply(pondmeans, function(t) rnorm(nfrogs.perpond,t,sqrt(sdsize.allfrogs^2-sdsize.amongpond^2)) )
rownames(allfrogs) <- paste0("frog",1:(nfrogs.perpond))
colnames(allfrogs) <- paste0("pond",1:nponds)
# confirm that population mean and standard deviation are as specified
sd(allfrogs)
mean(allfrogs)
nponds.sampled <- 2
nsamp.perpond <- 50
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
rownames(thissamp) <- paste0("frog",1:(nsamp.perpond))
colnames(thissamp) <- paste0("pond",1:nponds.sampled)
head(thissamp)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test
means <- numeric(1000)
means.ind <- numeric(1000)
ttest <- numeric(1000)
ttest.ind <- numeric(1000)
for(scenario in 1:1000){
ponds.sampled <- sample(1:nponds,nponds.sampled)
frogs.sampled <- replicate(nponds.sampled,sample(1:nfrogs.perpond,nsamp.perpond))
thissamp <- sapply(1:nponds.sampled,function(t) allfrogs[frogs.sampled[,t],ponds.sampled[t]])
thissamp.ind <- matrix(sample(allfrogs,nsamp.perpond*nponds.sampled),ncol=nponds.sampled)
means[scenario] <- mean(thissamp)
means.ind[scenario] <- mean(thissamp.ind)
test <- t.test(as.vector(thissamp),mu=1.5,alternative="greater")
test.ind <- t.test(as.vector(thissamp.ind),mu=1.5,alternative="greater")
ttest[scenario] <- test$p.value
ttest.ind[scenario] <- test.ind$p.value
}
layout(matrix(1:2,nrow=1))
hist(means,xlim=c(0,3))
hist(means.ind,xlim=c(0,3))
length(which(ttest<0.05))/1000
length(which(ttest.ind<0.05))/1000
#######
# Sampling distribution: the sample mean
mysample <- c(4.1,3.5,3.7,6.6,8.0,5.4,7.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
std.error <- sample.stdev/sqrt(n)
std.error
sampdist <- function(x){dt((x-sample.mean)/std.error,n-1)}
curve(sampdist,0,11,ylab="probability density",xlab="value",main="sampling distribution for the sample mean!")
abline(v=sample.mean,col="green",lwd=3)
confint <- c(sample.mean+std.error*qt(0.025,n-1),sample.mean+std.error*qt(0.975,n-1))
abline(v=confint,col="blue",lty=2)
#######
# Sampling distribution: the sample mean #2 (brute force simulation version)
mysample <- c(4.1,1.5,3.7,6.6,8.0,4.5,5.3,4.4)
mysample
n <- length(mysample)    # sample size
sample.mean <- mean(mysample)  # sample mean
sample.stdev <- sd(mysample)   # sample standard deviation (r uses denominator of n-1 by default!)
simulated.samples <- list()
for(s in 1:10000){
sd1 <- sqrt(sum((sample(mysample,length(mysample)-1,replace = T)-sample.mean)^2)/(length(mysample)-2))  # account for unknown standard deviation
simulated.samples[[paste0("sample ",s)]] <- rnorm(n,sample.mean,sd1)
}
sampling.distribution <- sapply(simulated.samples,mean)
plot(density(sampling.distribution),xlim=c(0,11),ylab="probability density",xlab="value",main="sampling distribution for the sample mean!",lwd=2)    # plot the brute-force sampling distribution
hist(sampling.distribution,add=T,freq=F)
par(new=T)
curve(sampdist,0,11,xlim=c(0,11),xaxt="n",yaxt="n",xlab="",ylab="",col="red",lwd=2)  # official sampling distribution
abline(v=sample.mean,col="green",lwd=3)
## Paired t-test example:
weightloss.data <- c(-10.4,-11.6,3.9,1.5,-0.3,-3.5 -10.0,-6.7,-6.1,-2.4,-6.0,2.3,0.1,-4.1,-3.2, -11.3,-3.2,-9.3,-7.5,-5.7,-0.1,0.0,-9.8,1.0,-11.9)
hist(weightloss.data,breaks=7)
mean.weightloss <- mean(weightloss.data)
null.weightloss <- 0
stdev.weightloss <- sd(weightloss.data)
sample.size <- length(weightloss.data)
std.error <- stdev.weightloss/sqrt(sample.size)
t.statistic <- (mean.weightloss-null.weightloss)/std.error
t.statistic
curve(dt(x,sample.size-1),-5.5,2)
abline(v=t.statistic,col="green",lwd=3)
t.crit <- qt(0.05,sample.size-1)    # 'critical value' of the t statistic- you can reject the null if your value is more extreme than this!
p=pt(t.statistic,sample.size-1)    # p value
p    # this is the p value
####### Alternative: use R's built in t test
t.test(weightloss.data,alternative = "less")   # should get the same p=value!
summary(weightloss.data)
mean.weightloss
std.error
curve(dt(x,sample.size),-4,4)
curve(dt(x,sample.size),-4,4,xaxt="n")
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability")
axis(1,at=seq(-4,4,2),labels = mean.weightloss+std.error*seq(-4,4,2) )
### confidence interval for weight loss data
summary(weightloss.data)
mean.weightloss    # mean weight loss
std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = mean.weightloss+std.error*seq(-4,4,2) )
### confidence interval for weight loss data
summary(weightloss.data)
mean.weightloss    # mean weight loss
std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
### confidence interval for weight loss data
summary(weightloss.data)
mean.weightloss    # mean weight loss
std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
abline(v=mean.weightloss,col="blue",lwd=3)
### confidence interval for weight loss data
summary(weightloss.data)
mean.weightloss    # mean weight loss
std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
abline(v=0,col="blue",lwd=3)
t.crit
t.crit <- qt(0.025,sample.size-1)    # for 95% confidence interval
t.crit
t.crit <- qt(0.975,sample.size-1)    # for 95% confidence interval
### confidence interval for weight loss data
# summary(weightloss.data)
#
# mean.weightloss    # mean weight loss
# std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
abline(v=0,col="blue",lwd=3)
t.crit <- qt(0.975,sample.size-1)    # for 95% confidence interval
abline(v=-1*t.crit,col="red",lty=2)
abline(v=1*t.crit,col="red",lty=2)
lower.bound <- mean.weightloss - t.crit*std.error
upper.bound <- mean.weightloss - t.crit*std.error
lower.bound
upper.bound
upper.bound <- mean.weightloss + t.crit*std.error
upper.bound
### confidence interval for weight loss data
# summary(weightloss.data)
#
# mean.weightloss    # mean weight loss
# std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
abline(v=0,col="blue",lwd=3)
t.crit <- qt(0.975,sample.size-1)    # for 95% confidence interval
abline(v=-1*t.crit,col="red",lty=2)
abline(v=1*t.crit,col="red",lty=2)
lower.bound <- mean.weightloss - t.crit*std.error
upper.bound <- mean.weightloss + t.crit*std.error
lower.bound
upper.bound
### confidence interval for weight loss data
# summary(weightloss.data)
#
# mean.weightloss    # mean weight loss
# std.error          # standard error of weight loss
curve(dt(x,sample.size),-4,4,xaxt="n",xlab="weight loss",ylab="probability density")
axis(1,at=seq(-4,4,2),labels = round(mean.weightloss+std.error*seq(-4,4,2),1) )
abline(v=0,col="blue",lwd=3)
t.crit <- qt(0.975,sample.size-1)    # for 95% confidence interval
abline(v=-1*t.crit,col="red",lty=2)
abline(v=1*t.crit,col="red",lty=2)
lower.bound <- mean.weightloss - t.crit*std.error
upper.bound <- mean.weightloss + t.crit*std.error
lower.bound
upper.bound
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
curve(dt(x,8),-4,4,xlab="possibilities",ylab='relative probability')
curve(dpois(x,2),0,8,xlab="possibilities",ylab='probability')
?curve
barplot(sapply(0:8,function(t) dpois(t,2)),xlab="possibilities",ylab='probability')
barplot(sapply(0:10,function(t) dpois(t,2)),xlab="possibilities",ylab='probability')
x <- barplot(sapply(0:10,function(t) dpois(t,2)),xlab="possibilities",ylab='probability')
## probability mass function example
x <- barplot(sapply(0:10,function(t) dpois(t,2)),xlab="possibilities",ylab='probability')
axis(1,at=x,labels=0:10)
## cumulative density function
curve(pt(x,df=8),-4,4,xlab="possibilities",ylab='cumulative probability')
## cumulative density function
# for continuous distribution
curve(pt(x,df=8),-4,4,xlab="possibilities",ylab='cumulative probability')
# for discrete distribution
x <- barplot(sapply(0:10,function(t) ppois(t,2)),xlab="possibilities",ylab='cumulative probability')
axis(1,at=x,labels=0:10)
rnorm(10)    # generate 10 random numbers from a standard normal distribution
rpois(8,18)  # generate 8 random numbers from a poisson distribution with mean=18
#################
# Probability distributions
mean <- 5
rpois(10,mean)    # note: the random numbers sampled from this distribution have no decimal component
# plot a discrete distribution!
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
barplot(cumsum(probs),ylab="Cumulative Probability",main="Poisson distribution (discrete)")   # cumulative distribution
sum(probs)   # just to make sure it sums to 1!  Does it???
#################
# Probability distributions
mean <- 5
rpois(10,mean)    # note: the random numbers sampled from this distribution have no decimal component
# plot discrete probabilities of getting particular outcomes!
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability Mass",main="Poisson distribution (discrete)")
barplot(cumsum(probs),ylab="Cumulative Probability",main="Poisson distribution (discrete)")   # cumulative distribution
sum(probs)   # just to make sure it sums to 1!  Does it???
sum(probs)   # just to make sure it sums to 1!  Does it???
#########
# continuous distributions
shape1 = 0.5
shape2 = 0.5
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))   # probability density
curve(pbeta(x,shape1,shape2))   # cumulative distribution
integrate(f=dbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)    # just to make sure it integrates to 1!!
rbeta(10,shape1,shape2)   # generate 10 random numbers from a continuous distribution
curve(dbeta(x,shape1,shape2))   # probability density function (PDF)
#########
# continuous distributions
shape1 = 0.5
shape2 = 0.5
rbeta(10,shape1,shape2)   # generate 10 random numbers from a continuous distribution
curve(dbeta(x,shape1,shape2),ylab="probability density",xlab="possibilities")   # probability density function (PDF)
curve(pbeta(x,shape1,shape2),ylab="cumulative probability",xlab="possibilities")   # cumulative distribution
integrate(f=dbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)    # just to make sure it integrates to 1!!
## probability density function example
curve(dt(x,8),-4,4,xlab="possibilities",ylab='relative probability (prob density')
## probability density function example
curve(dt(x,8),-4,4,xlab="possibilities",ylab='relative probability (prob density)')
## quantile function
# for continuous distribution
curve(pt(x,df=8),-4,4,xlab="possibilities",ylab='cumulative probability')
# for discrete distribution
x <- barplot(sapply(0:10,function(t) ppois(t,2)),xlab="possibilities",ylab='cumulative probability')
axis(1,at=x,labels=0:10)
## quantile function
# for continuous distribution
curve(qt(x,df=8),0,1,xlab="cumulative probability",ylab='quantile')
# for discrete distribution
curve(qpois(x,4),0,1,xlab="cumulative probability",ylab='quantile')
rmd2rscript("INTRO.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE1.Rmd")
rmd2rscript("LECTURE2.Rmd")
